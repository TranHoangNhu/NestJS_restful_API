var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/controllers/AppController.html",[0,1.442,1,1.973]],["body/controllers/AppController.html",[0,2.25,1,3.079,2,1.782,3,0.489,4,0.428,5,0.428,6,3.194,7,0.428,8,1.704,9,4.641,10,1.35,11,0.035,12,0.693,13,3.851,14,1.35,15,1.556,16,0.618,17,0.935,18,2.72,19,3.194,20,0.489,21,0.066,22,2.762,23,3.851,24,1.233,25,3.851,26,0.027,27,0.027]],["title/modules/AppModule.html",[28,1.442,29,1.973]],["body/modules/AppModule.html",[1,2.761,2,1.726,3,0.331,4,0.289,5,0.289,11,0.035,16,0.726,17,0.631,18,2.68,19,2.157,20,0.331,21,0.045,26,0.021,27,0.021,28,2.018,29,3.619,30,1.328,31,1.328,32,1.647,33,1.647,34,1.328,35,2.761,36,1.647,37,2.157,38,2.157,39,2.157,40,2.972,41,2.972,42,2.362,43,1.647,44,1.647,45,2.601,46,3.127,47,2.601,48,2.601,49,1.865,50,1.328,51,0.822,52,2.601,53,3.73,54,4.764,55,2.157,56,2.601,57,1.647,58,2.601,59,1.432,60,2.601,61,2.601,62,2.601,63,2.601,64,2.157,65,2.601,66,2.601,67,2.601,68,2.601,69,2.601,70,0.468,71,2.601,72,2.601,73,2.601,74,2.601,75,2.601,76,2.601,77,2.601,78,1.203,79,2.601,80,2.601,81,2.601,82,1.647,83,2.601]],["title/injectables/AppService.html",[18,1.59,84,0.997]],["body/injectables/AppService.html",[3,0.516,4,0.451,5,0.451,7,0.451,8,1.76,9,4.729,11,0.035,12,0.73,14,1.422,15,1.608,16,0.516,17,0.985,18,2.564,20,0.516,21,0.069,24,1.299,26,0.028,27,0.028,84,1.608,85,2.298,86,3.365,87,4.057,88,4.057,89,4.057]],["title/guards/AuthGuard.html",[90,2.234,91,1.764]],["body/guards/AuthGuard.html",[3,0.312,4,0.273,5,0.273,7,0.273,8,1.254,11,0.035,12,0.644,14,0.86,16,0.536,17,0.596,20,0.312,21,0.042,24,0.786,26,0.02,27,0.02,51,1.134,57,1.555,64,2.036,70,0.644,84,1.145,91,2.026,92,1.761,93,2.036,94,2.673,95,3.847,96,1.826,97,2.455,98,4.268,99,2.039,100,2.455,101,1.506,102,1.373,103,1.506,104,2.967,105,3.326,106,2.455,107,2.036,108,2.967,109,2.455,110,2.266,111,2.036,112,2.036,113,2.026,114,2.368,115,2.266,116,2.036,117,3.577,118,3.577,119,4.406,120,2.455,121,2.455,122,2.39,123,2.155,124,2.455,125,2.455,126,2.455,127,2.036,128,3.577,129,2.455,130,2.036,131,2.266,132,2.455,133,2.036,134,2.036,135,2.036,136,2.455,137,2.036,138,2.455,139,2.455,140,2.455,141,2.036,142,2.455,143,2.036,144,2.455,145,2.455,146,2.036,147,2.455,148,2.455,149,2.455,150,2.455]],["title/injectables/AuthService.html",[84,0.997,151,1.59]],["body/injectables/AuthService.html",[3,0.252,4,0.22,5,0.22,7,0.22,8,1.068,11,0.036,12,0.668,14,1.068,16,0.604,17,0.481,20,0.252,21,0.034,24,0.975,26,0.017,27,0.017,51,0.672,57,1.255,70,0.668,78,1.41,84,0.975,85,1.122,94,3.008,96,1.556,98,4.104,99,1.6,101,1.563,102,1.425,103,1.563,110,1.255,113,1.726,114,2.674,115,1.255,119,2.528,122,2.103,123,1.895,130,2.528,131,3.133,133,2.528,134,2.528,137,1.644,151,1.556,152,1.644,153,3.713,154,3.047,155,1.982,156,1.982,157,3.047,158,3.047,159,2.36,160,1.982,161,1.726,162,1.93,163,3.047,164,2.128,165,1.982,166,1.421,167,1.421,168,2.186,169,1.644,170,2.528,171,1.895,172,3.047,173,4.168,174,3.047,175,1.982,176,1.982,177,1.644,178,2.528,179,1.644,180,1.644,181,2.528,182,1.982,183,1.982,184,1.982,185,3.047,186,3.047,187,1.283,188,1.982,189,1.726,190,1.982,191,1.726,192,1.982,193,1.982,194,1.93,195,1.982,196,4.168,197,3.047,198,3.047,199,1.982,200,3.047,201,3.047,202,3.047,203,1.982,204,1.982,205,1.982,206,1.982,207,1.982,208,1.982,209,1.982,210,1.982]],["title/classes/CreatePostDto.html",[21,0.053,211,1.764]],["body/classes/CreatePostDto.html",[3,0.444,4,0.389,5,0.389,7,0.389,10,1.601,11,0.035,12,0.822,15,1.727,16,0.581,20,0.444,21,0.078,26,0.026,27,0.026,70,0.822,211,2.587,212,1.618,213,2.899,214,1.753,215,3.171,216,3.649,217,2.899,218,3.789,219,3.789,220,3.496,221,2.899,222,3.789,223,3.496,224,2.587,225,2.899,226,2.899,227,1.785,228,2.882,229,1.618,230,2.899,231,2.899]],["title/classes/LoginUserDto.html",[21,0.053,159,1.764]],["body/classes/LoginUserDto.html",[3,0.472,4,0.413,5,0.413,7,0.413,10,1.665,11,0.035,12,0.855,15,1.767,16,0.604,20,0.472,21,0.081,26,0.027,27,0.027,70,0.855,78,2.424,159,2.69,171,2.674,212,1.719,214,1.823,224,2.69,227,1.896,228,2.966,229,1.719,232,3.08,233,2.663,234,3.714,235,2.663,236,3.714,237,3.407]],["title/classes/Permission.html",[21,0.053,238,1.764]],["body/classes/Permission.html",[3,0.448,4,0.392,5,0.392,7,0.392,8,1.61,11,0.035,12,0.634,14,1.235,16,0.584,17,0.856,20,0.448,21,0.06,24,1.47,26,0.026,27,0.026,51,1.193,70,0.634,101,1.484,102,1.353,103,1.484,110,2.232,122,1.996,123,1.8,170,3.81,187,1.934,212,1.631,238,2.601,239,2.924,240,5.109,241,4.593,242,2.364,243,2.364,244,3.525,245,3.525,246,1.996,247,3.525,248,3.525,249,2.528,250,3.525,251,3.525,252,3.525]],["title/entities/Post.html",[59,1.196,253,1.764]],["body/entities/Post.html",[3,0.347,4,0.303,5,0.303,7,0.303,10,1.869,11,0.035,12,0.959,15,1.558,16,0.569,20,0.347,21,0.066,26,0.022,27,0.022,51,1.255,59,1.719,70,0.959,82,1.728,102,1.047,187,1.885,214,1.481,215,2.536,216,3.211,242,1.786,246,1.545,253,2.185,254,2.263,255,4.478,256,4.478,257,4.868,258,3.859,259,2.728,260,4.547,261,2.728,262,3.714,263,2.728,264,2.728,265,2.728,266,2.728,267,2.728,268,2.728,269,2.728,270,3.859,271,1.957,272,4.478,273,3.859,274,1.545,275,2.728,276,2.728,277,2.728,278,2.728,279,2.728]],["title/controllers/PostController.html",[0,1.442,280,1.973]],["body/controllers/PostController.html",[0,0.993,2,0.993,3,0.273,4,0.239,5,0.239,7,0.239,8,1.134,10,1.633,11,0.035,12,0.838,14,1.633,16,0.646,17,0.521,20,0.273,21,0.037,22,1.539,24,1.491,26,0.018,27,0.018,51,1.121,59,1.242,70,0.781,91,1.215,101,1.828,102,1.666,103,1.828,161,2.774,187,2.062,211,2.459,242,2.479,243,2.566,246,1.215,280,2.05,281,1.779,282,1.779,283,2.145,284,3.898,285,3.237,286,3.237,287,4.342,288,3.898,289,2.145,290,2.145,291,2.145,292,2.145,293,2.145,294,2.145,295,2.145,296,2.685,297,2.145,298,2.145,299,2.145,300,2.459,301,2.145,302,2.145,303,3.233,304,1.779,305,1.539,306,1.779,307,3.601,308,1.779,309,1.779,310,1.779,311,1.99,312,1.779,313,1.779,314,2.145,315,1.779,316,1.779,317,2.145,318,1.779,319,3.233,320,2.145,321,2.145,322,2.145,323,2.145,324,1.779,325,1.779,326,2.145,327,1.779,328,2.145,329,2.145]],["title/modules/PostModule.html",[28,1.442,40,1.764]],["body/modules/PostModule.html",[2,2.009,3,0.411,4,0.36,5,0.36,11,0.035,16,0.73,17,0.786,20,0.411,21,0.055,26,0.024,27,0.024,28,2.267,30,1.653,31,1.653,32,2.05,33,2.05,34,1.653,35,3.103,36,2.05,40,3.304,42,2.75,43,2.05,44,2.05,46,2.322,49,2.322,50,1.653,51,0.957,59,1.243,99,2.157,111,2.685,246,1.833,280,3.103,311,2.869,312,2.685,330,2.685,331,2.685,332,3.237,333,3.237,334,2.685,335,3.237]],["title/injectables/PostService.html",[84,0.997,311,1.59]],["body/injectables/PostService.html",[3,0.256,4,0.224,5,0.224,7,0.224,8,1.082,11,0.036,12,0.86,14,1.588,16,0.653,17,0.489,20,0.256,21,0.035,24,1.451,26,0.017,27,0.017,50,1.029,51,1.097,59,2.062,70,0.816,84,0.988,85,1.141,94,3.028,96,1.029,101,1.908,102,1.74,103,1.908,113,1.141,114,1.576,122,1.748,123,1.576,131,1.955,161,2.708,162,1.955,187,2.161,211,2.381,238,1.141,242,2.436,243,2.376,246,1.141,274,1.141,300,2.381,305,2.214,311,1.576,313,1.672,316,1.672,334,1.672,336,1.672,337,2.561,338,4.205,339,3.087,340,2.016,341,3.015,342,2.016,343,3.087,344,2.561,345,2.016,346,3.087,347,2.016,348,3.087,349,2.016,350,2.016,351,3.087,352,2.016,353,1.672,354,1.672,355,1.672,356,2.016,357,1.672,358,2.016,359,1.672,360,3.087,361,2.016,362,2.016,363,3.087,364,3.087,365,3.087,366,1.672,367,2.016]],["title/classes/RegisterUserDto.html",[21,0.053,164,1.59]],["body/classes/RegisterUserDto.html",[3,0.42,4,0.367,5,0.367,7,0.367,10,1.849,11,0.035,12,0.949,15,1.876,16,0.559,20,0.42,21,0.075,26,0.025,27,0.025,70,0.949,78,2.29,164,2.246,171,2.526,189,2.802,191,2.802,212,1.528,214,1.689,224,2.988,227,1.686,228,3.112,229,1.528,233,2.368,235,3.548,237,3.155,368,2.739,369,3.302,370,3.302,371,3.302,372,3.302]],["title/guards/RoleGuard.html",[90,2.234,373,1.973]],["body/guards/RoleGuard.html",[3,0.42,4,0.367,5,0.367,7,0.367,8,1.542,11,0.035,12,0.792,14,1.157,15,1.584,16,0.559,17,0.801,20,0.42,21,0.057,22,2.368,24,1.057,26,0.025,27,0.025,70,0.792,84,1.408,92,2.368,95,4.559,96,1.686,101,1.852,102,1.689,103,1.852,104,2.739,105,3.784,107,3.649,108,3.649,112,2.739,114,1.686,115,2.091,116,2.739,373,2.786,374,2.739,375,3.302,376,3.302,377,2.786,378,3.302,379,4.399,380,4.948,381,2.739,382,3.302]],["title/classes/UpdatePostDto.html",[21,0.053,300,1.764]],["body/classes/UpdatePostDto.html",[3,0.444,4,0.389,5,0.389,7,0.389,10,1.601,11,0.035,12,0.822,15,1.727,16,0.581,20,0.444,21,0.078,26,0.026,27,0.026,70,0.822,212,1.618,214,1.753,215,3.171,216,3.649,217,2.899,218,3.789,219,3.789,221,2.899,222,3.789,224,2.587,225,2.899,226,2.899,227,1.785,228,2.882,229,1.618,230,2.899,231,2.899,300,2.587,383,2.899,384,3.496,385,3.496]],["title/classes/UpdateUserDto.html",[21,0.053,386,1.764]],["body/classes/UpdateUserDto.html",[3,0.398,4,0.348,5,0.348,7,0.348,10,1.809,11,0.035,12,0.971,15,1.853,16,0.612,20,0.398,21,0.073,26,0.024,27,0.024,70,0.971,78,2.228,171,2.458,189,2.726,191,2.726,194,3.049,212,1.448,214,1.628,224,2.923,227,1.597,228,3.056,229,1.448,233,2.243,235,3.453,237,3.043,377,3.049,386,2.402,387,2.595,388,3.128,389,3.128,390,3.128,391,3.128,392,3.128,393,1.981]],["title/entities/User.html",[51,0.687,253,1.764]],["body/entities/User.html",[3,0.327,4,0.287,5,0.287,7,0.287,10,1.889,11,0.035,12,0.97,15,1.766,16,0.551,20,0.471,21,0.063,26,0.021,27,0.021,51,1.046,59,2.008,70,0.97,78,2.007,82,1.632,171,2.215,187,1.826,189,2.457,191,2.457,194,2.747,214,1.422,242,1.714,249,2.657,253,2.098,260,4.66,262,3.598,271,1.848,274,1.459,359,3.073,377,2.747,394,1.848,395,4.338,396,2.577,397,2.577,398,2.577,399,2.577,400,2.577,401,2.577,402,2.577,403,2.577,404,2.577,405,2.577,406,2.577,407,3.705,408,4.338,409,2.577,410,2.577,411,2.657,412,2.137,413,2.577]],["title/controllers/UserController.html",[0,1.442,414,1.973]],["body/controllers/UserController.html",[0,0.791,2,0.791,3,0.217,4,0.19,5,0.19,7,0.19,8,0.951,10,1.64,11,0.035,12,0.842,14,1.64,16,0.665,17,0.415,20,0.217,21,0.029,24,1.498,26,0.015,27,0.015,51,1.13,59,0.656,70,0.755,91,0.968,96,0.873,99,1.296,101,1.88,102,1.714,103,1.88,113,1.537,151,1.386,159,2.178,161,2.75,164,1.963,166,1.226,167,1.226,169,1.418,187,1.88,229,0.791,242,2.315,243,2.533,282,1.418,296,1.418,303,2.252,304,1.418,305,1.226,306,1.418,307,3.19,308,1.418,309,1.418,310,1.418,315,1.418,318,1.418,319,3.19,324,1.418,325,2.252,327,1.418,373,1.083,386,2.178,393,1.083,411,2.422,414,1.719,415,1.418,416,1.709,417,3.377,418,3.845,419,2.715,420,2.715,421,2.715,422,2.715,423,3.377,424,1.709,425,1.709,426,3.377,427,1.709,428,1.709,429,1.709,430,1.709,431,1.709,432,1.709,433,1.709,434,1.709,435,1.709,436,1.709,437,1.709,438,1.709,439,2.715,440,1.709,441,1.709,442,2.715,443,1.709,444,1.709,445,1.709,446,1.709,447,1.418,448,1.418,449,1.709,450,1.709,451,4.465,452,1.709,453,1.709,454,3.845,455,3.845,456,1.709,457,1.709,458,1.709,459,1.709,460,1.709,461,1.709,462,1.709,463,1.709,464,1.709,465,1.709,466,1.709]],["title/modules/UserModule.html",[28,1.442,41,1.764]],["body/modules/UserModule.html",[2,2.041,3,0.421,4,0.369,5,0.369,11,0.035,16,0.719,17,0.804,20,0.421,21,0.057,26,0.025,27,0.025,28,2.294,30,1.692,31,1.692,32,2.099,33,2.099,34,1.692,35,3.139,36,2.099,41,3.322,42,2.793,43,2.099,44,2.099,46,2.377,49,2.377,50,1.692,51,0.731,99,2.172,151,2.889,167,2.377,393,2.099,414,3.139,448,2.749,467,2.749,468,2.749,469,3.315,470,3.315,471,3.315]],["title/injectables/UserService.html",[84,0.997,99,1.196]],["body/injectables/UserService.html",[3,0.223,4,0.195,5,0.195,7,0.195,8,0.972,11,0.036,12,0.851,14,1.583,15,1.1,16,0.642,17,0.426,20,0.223,21,0.03,24,1.446,26,0.016,27,0.016,50,0.897,51,1.214,70,0.813,78,1.283,84,0.888,85,0.995,94,2.861,96,1.416,99,1.065,101,1.902,102,1.734,103,1.902,110,1.112,113,0.995,114,1.993,122,1.946,123,1.755,131,2.472,161,2.558,162,1.756,164,1.993,166,1.26,168,1.989,171,1.993,177,1.457,178,2.301,179,1.457,180,1.457,181,1.457,187,1.644,189,0.995,191,0.995,194,1.112,238,0.995,242,2.336,243,2.269,274,0.995,337,2.301,341,2.8,344,2.301,353,1.457,354,1.457,355,1.457,357,1.457,366,2.301,386,2.211,393,1.112,447,1.457,472,1.457,473,2.773,474,3.904,475,2.773,476,2.773,477,2.773,478,1.756,479,1.756,480,2.773,481,1.756,482,2.773,483,1.756,484,1.756,485,2.773,486,1.756,487,2.773,488,1.756,489,2.773,490,1.756,491,1.756,492,1.756,493,1.756,494,1.756,495,2.773,496,1.756,497,2.773,498,1.756,499,1.756,500,1.756,501,2.773,502,2.773,503,2.773,504,1.756,505,1.756,506,1.756,507,1.756,508,1.756]],["title/coverage.html",[509,3.034]],["body/coverage.html",[0,2.118,1,1.799,5,0.316,6,2.356,11,0.035,18,1.45,21,0.092,26,0.022,27,0.022,34,1.45,51,0.626,59,1.09,70,0.511,84,1.586,86,2.356,90,2.847,91,1.608,93,2.356,99,1.09,123,1.45,151,1.45,152,2.356,159,1.608,164,1.45,211,1.608,213,2.356,232,2.356,238,1.608,239,2.356,243,1.314,253,2.248,254,2.356,280,1.799,281,2.356,300,1.608,311,1.45,336,2.356,368,2.356,373,1.799,374,2.356,383,2.356,386,1.608,387,2.356,394,2.037,414,1.799,415,2.356,472,2.356,509,2.037,510,2.84,511,2.84,512,2.84,513,6.162,514,4.576,515,5.214,516,2.356,517,2.84,518,4.955,519,3.97,520,2.84,521,2.84,522,2.356,523,2.84,524,2.84,525,3.97,526,2.84,527,2.84]],["title/dependencies.html",[31,1.91,528,2.166]],["body/dependencies.html",[11,0.035,17,0.918,21,0.082,26,0.027,27,0.027,31,1.93,50,1.93,55,3.136,57,2.394,168,2.712,227,1.93,229,1.75,271,2.712,274,2.141,381,3.136,529,5.282,530,3.781,531,3.781,532,3.781,533,3.781,534,3.781,535,3.781,536,3.781,537,3.781,538,3.781,539,3.781,540,3.781,541,3.781,542,3.781,543,3.781,544,3.781,545,3.781,546,3.781,547,3.781,548,3.781]],["title/miscellaneous/enumerations.html",[549,1.333,550,3.103]],["body/miscellaneous/enumerations.html",[7,0.489,11,0.034,26,0.03,27,0.03,51,1.163,249,3.785,377,3.342,394,3.156,411,3.785,549,2.246,550,3.65,551,4.4,552,4.689]],["title/miscellaneous/functions.html",[549,1.333,553,3.103]],["body/miscellaneous/functions.html",[7,0.52,11,0.031,26,0.031,27,0.031,34,2.959,516,3.875,549,2.385,553,3.875,554,4.672]],["title/index.html",[7,0.29,555,2.612,556,2.612]],["body/index.html",[4,0.349,11,0.034,26,0.024,27,0.024,141,2.604,215,1.778,341,2.252,509,2.252,557,3.14,558,3.14,559,4.253,560,3.14,561,3.14,562,3.14,563,3.14,564,3.14,565,3.14,566,4.824,567,3.14,568,3.14,569,3.14,570,4.824,571,5.696,572,3.14,573,3.14,574,3.14,575,5.57,576,3.14,577,3.14,578,4.253,579,3.14,580,3.14,581,3.14,582,3.14,583,4.253,584,4.253,585,3.14,586,3.14,587,3.14,588,4.253,589,4.253,590,3.14,591,3.14,592,3.14,593,3.14,594,3.14,595,2.604,596,3.14,597,3.14,598,3.14,599,3.14,600,3.14,601,3.14,602,3.14,603,3.14,604,3.14,605,2.604,606,3.14,607,3.14,608,3.14,609,3.14,610,3.14,611,3.14,612,2.604]],["title/modules.html",[30,2.16]],["body/modules.html",[11,0.03,26,0.03,27,0.03,29,2.831,30,2.283,40,2.532,41,2.532,595,4.721,613,5.691,614,5.691,615,5.691]],["title/overview.html",[616,3.509]],["body/overview.html",[2,1.584,11,0.034,18,2.572,26,0.025,27,0.025,28,1.584,29,3.741,30,1.748,31,1.748,32,2.168,33,2.168,34,1.748,35,2.168,36,2.168,37,2.84,38,2.84,39,2.84,40,3.297,41,3.297,42,2.854,43,2.168,44,2.168,82,2.168,85,1.939,92,2.455,99,2.055,127,3.738,135,3.738,143,2.84,151,2.572,212,1.584,311,2.572,330,2.84,331,2.84,467,2.84,468,2.84,616,2.84,617,3.424]],["title/properties.html",[214,1.436,528,2.166]],["body/properties.html",[11,0.034,26,0.03,27,0.03,214,1.764,215,2.602,605,3.811,612,3.811,618,4.594,619,4.594,620,4.594]],["title/miscellaneous/variables.html",[549,1.333,621,3.103]],["body/miscellaneous/variables.html",[7,0.472,11,0.035,24,1.358,26,0.029,27,0.029,105,3.043,114,2.166,115,2.687,146,3.52,162,2.687,243,2.389,412,3.52,522,3.52,549,2.166,552,3.52,621,3.52,622,4.243,623,4.243,624,4.243,625,4.243,626,4.243,627,4.243]]],"invertedIndex":[["",{"_index":11,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/LoginUserDto.html":{},"classes/Permission.html":{},"entities/Post.html":{},"controllers/PostController.html":{},"modules/PostModule.html":{},"injectables/PostService.html":{},"classes/RegisterUserDto.html":{},"guards/RoleGuard.html":{},"classes/UpdatePostDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":513,"title":{},"body":{"coverage.html":{}}}],["0.0.1",{"_index":619,"title":{},"body":{"properties.html":{}}}],["0.14.1",{"_index":541,"title":{},"body":{"dependencies.html":{}}}],["0.2.0",{"_index":546,"title":{},"body":{"dependencies.html":{}}}],["0.3.20",{"_index":548,"title":{},"body":{"dependencies.html":{}}}],["0.5.1",{"_index":540,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":518,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":514,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":515,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":521,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":524,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":519,"title":{},"body":{"coverage.html":{}}}],["0/7",{"_index":520,"title":{},"body":{"coverage.html":{}}}],["0/8",{"_index":525,"title":{},"body":{"coverage.html":{}}}],["1",{"_index":118,"title":{},"body":{"guards/AuthGuard.html":{}}}],["10",{"_index":180,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{}}}],["10.0.0",{"_index":529,"title":{},"body":{"dependencies.html":{}}}],["10.0.2",{"_index":536,"title":{},"body":{"dependencies.html":{}}}],["10.2.0",{"_index":532,"title":{},"body":{"dependencies.html":{}}}],["1d",{"_index":67,"title":{},"body":{"modules/AppModule.html":{}}}],["2",{"_index":127,"title":{},"body":{"guards/AuthGuard.html":{},"overview.html":{}}}],["3",{"_index":135,"title":{},"body":{"guards/AuthGuard.html":{},"overview.html":{}}}],["3.2.0",{"_index":530,"title":{},"body":{"dependencies.html":{}}}],["3.9.1",{"_index":543,"title":{},"body":{"dependencies.html":{}}}],["4",{"_index":143,"title":{},"body":{"guards/AuthGuard.html":{},"overview.html":{}}}],["5.0.2",{"_index":538,"title":{},"body":{"dependencies.html":{}}}],["5.1.1",{"_index":539,"title":{},"body":{"dependencies.html":{}}}],["6",{"_index":617,"title":{},"body":{"overview.html":{}}}],["60",{"_index":222,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/UpdatePostDto.html":{}}}],["7.3.0",{"_index":535,"title":{},"body":{"dependencies.html":{}}}],["7.8.1",{"_index":547,"title":{},"body":{"dependencies.html":{}}}],["access",{"_index":126,"title":{},"body":{"guards/AuthGuard.html":{}}}],["access_token",{"_index":196,"title":{},"body":{"injectables/AuthService.html":{}}}],["action",{"_index":252,"title":{},"body":{"classes/Permission.html":{}}}],["admin",{"_index":249,"title":{},"body":{"classes/Permission.html":{},"entities/User.html":{},"miscellaneous/enumerations.html":{}}}],["again",{"_index":142,"title":{},"body":{"guards/AuthGuard.html":{}}}],["already",{"_index":176,"title":{},"body":{"injectables/AuthService.html":{}}}],["amazing",{"_index":596,"title":{},"body":{"index.html":{}}}],["api/v1/posts",{"_index":283,"title":{},"body":{"controllers/PostController.html":{}}}],["api/v1/users",{"_index":416,"title":{},"body":{"controllers/UserController.html":{}}}],["apibearerauth",{"_index":451,"title":{},"body":{"controllers/UserController.html":{}}}],["apibearerauth()@delete('/:id')@useguards(new",{"_index":425,"title":{},"body":{"controllers/UserController.html":{}}}],["apibearerauth()@get('/current",{"_index":431,"title":{},"body":{"controllers/UserController.html":{}}}],["apibearerauth()@get()@useguards(new",{"_index":428,"title":{},"body":{"controllers/UserController.html":{}}}],["apibearerauth()@put('/:id')@useguards(new",{"_index":445,"title":{},"body":{"controllers/UserController.html":{}}}],["apibearerauth()@useguards(new",{"_index":435,"title":{},"body":{"controllers/UserController.html":{}}}],["apiproperty",{"_index":228,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/LoginUserDto.html":{},"classes/RegisterUserDto.html":{},"classes/UpdatePostDto.html":{},"classes/UpdateUserDto.html":{}}}],["apiproperty()@isemail",{"_index":233,"title":{},"body":{"classes/LoginUserDto.html":{},"classes/RegisterUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["apiproperty()@isnotempty",{"_index":235,"title":{},"body":{"classes/LoginUserDto.html":{},"classes/RegisterUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["apiproperty()@isnotempty()@length(4",{"_index":221,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/UpdatePostDto.html":{}}}],["apiproperty()@maxlength(160",{"_index":217,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/UpdatePostDto.html":{}}}],["app",{"_index":573,"title":{},"body":{"index.html":{}}}],["app.controller",{"_index":47,"title":{},"body":{"modules/AppModule.html":{}}}],["app.service",{"_index":19,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{}}}],["appcontroller",{"_index":1,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["applications",{"_index":565,"title":{},"body":{"index.html":{}}}],["appmodule",{"_index":29,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["appservice",{"_index":18,"title":{"injectables/AppService.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"coverage.html":{},"overview.html":{}}}],["assign",{"_index":144,"title":{},"body":{"guards/AuthGuard.html":{}}}],["async",{"_index":94,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"injectables/PostService.html":{},"injectables/UserService.html":{}}}],["auth.service",{"_index":448,"title":{},"body":{"controllers/UserController.html":{},"modules/UserModule.html":{}}}],["authguard",{"_index":91,"title":{"guards/AuthGuard.html":{}},"body":{"guards/AuthGuard.html":{},"controllers/PostController.html":{},"controllers/UserController.html":{},"coverage.html":{}}}],["author",{"_index":605,"title":{},"body":{"index.html":{},"properties.html":{}}}],["authserivce",{"_index":453,"title":{},"body":{"controllers/UserController.html":{}}}],["authservice",{"_index":151,"title":{"injectables/AuthService.html":{}},"body":{"injectables/AuthService.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"coverage.html":{},"overview.html":{}}}],["await",{"_index":131,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"injectables/PostService.html":{},"injectables/UserService.html":{}}}],["backers",{"_index":597,"title":{},"body":{"index.html":{}}}],["badrequestexception",{"_index":110,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"classes/Permission.html":{},"injectables/UserService.html":{}}}],["badrequestexception('email",{"_index":175,"title":{},"body":{"injectables/AuthService.html":{}}}],["badrequestexception('invalid",{"_index":200,"title":{},"body":{"injectables/AuthService.html":{}}}],["badrequestexception('user",{"_index":250,"title":{},"body":{"classes/Permission.html":{}}}],["badrequestexception('you",{"_index":499,"title":{},"body":{"injectables/UserService.html":{}}}],["based",{"_index":138,"title":{},"body":{"guards/AuthGuard.html":{}}}],["bcrypt",{"_index":168,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["bcrypt.compare",{"_index":203,"title":{},"body":{"injectables/AuthService.html":{}}}],["bcrypt.hash(requestbody.password",{"_index":179,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{}}}],["belong",{"_index":140,"title":{},"body":{"guards/AuthGuard.html":{}}}],["body",{"_index":303,"title":{},"body":{"controllers/PostController.html":{},"controllers/UserController.html":{}}}],["boolean",{"_index":379,"title":{},"body":{"guards/RoleGuard.html":{}}}],["bootstrap",{"_index":34,"title":{},"body":{"modules/AppModule.html":{},"modules/PostModule.html":{},"modules/UserModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["browse",{"_index":615,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":613,"title":{},"body":{"modules.html":{}}}],["building",{"_index":560,"title":{},"body":{"index.html":{}}}],["canactivate",{"_index":95,"title":{},"body":{"guards/AuthGuard.html":{},"guards/RoleGuard.html":{}}}],["canactivate(context",{"_index":104,"title":{},"body":{"guards/AuthGuard.html":{},"guards/RoleGuard.html":{}}}],["catch",{"_index":147,"title":{},"body":{"guards/AuthGuard.html":{}}}],["change",{"_index":500,"title":{},"body":{"injectables/UserService.html":{}}}],["check",{"_index":170,"title":{},"body":{"injectables/AuthService.html":{},"classes/Permission.html":{}}}],["check(id",{"_index":241,"title":{},"body":{"classes/Permission.html":{}}}],["class",{"_index":21,"title":{"classes/CreatePostDto.html":{},"classes/LoginUserDto.html":{},"classes/Permission.html":{},"classes/RegisterUserDto.html":{},"classes/UpdatePostDto.html":{},"classes/UpdateUserDto.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/LoginUserDto.html":{},"classes/Permission.html":{},"entities/Post.html":{},"controllers/PostController.html":{},"modules/PostModule.html":{},"injectables/PostService.html":{},"classes/RegisterUserDto.html":{},"guards/RoleGuard.html":{},"classes/UpdatePostDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"dependencies.html":{}}}],["classes",{"_index":212,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/LoginUserDto.html":{},"classes/Permission.html":{},"classes/RegisterUserDto.html":{},"classes/UpdatePostDto.html":{},"classes/UpdateUserDto.html":{},"overview.html":{}}}],["classserializerinterceptor",{"_index":304,"title":{},"body":{"controllers/PostController.html":{},"controllers/UserController.html":{}}}],["cluster_appmodule",{"_index":37,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":38,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_providers",{"_index":39,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_postmodule",{"_index":330,"title":{},"body":{"modules/PostModule.html":{},"overview.html":{}}}],["cluster_postmodule_providers",{"_index":331,"title":{},"body":{"modules/PostModule.html":{},"overview.html":{}}}],["cluster_usermodule",{"_index":467,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["cluster_usermodule_providers",{"_index":468,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["column",{"_index":260,"title":{},"body":{"entities/Post.html":{},"entities/User.html":{}}}],["column()@createdatecolumn",{"_index":258,"title":{},"body":{"entities/Post.html":{}}}],["column()@exclude",{"_index":400,"title":{},"body":{"entities/User.html":{}}}],["column({default",{"_index":404,"title":{},"body":{"entities/User.html":{}}}],["configmodule",{"_index":53,"title":{},"body":{"modules/AppModule.html":{}}}],["configmodule.forroot",{"_index":61,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice",{"_index":54,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('db_database_name",{"_index":81,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('db_host",{"_index":73,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('db_password",{"_index":79,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('db_port",{"_index":75,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('db_username",{"_index":77,"title":{},"body":{"modules/AppModule.html":{}}}],["console.log(data",{"_index":627,"title":{},"body":{"miscellaneous/variables.html":{}}}],["const",{"_index":114,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"injectables/PostService.html":{},"guards/RoleGuard.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["constructor",{"_index":96,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"injectables/PostService.html":{},"guards/RoleGuard.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["constructor(@injectrepository(post",{"_index":356,"title":{},"body":{"injectables/PostService.html":{}}}],["constructor(jwtservice",{"_index":97,"title":{},"body":{"guards/AuthGuard.html":{}}}],["constructor(postrepo",{"_index":340,"title":{},"body":{"injectables/PostService.html":{}}}],["constructor(private",{"_index":22,"title":{},"body":{"controllers/AppController.html":{},"controllers/PostController.html":{},"guards/RoleGuard.html":{}}}],["constructor(roles",{"_index":375,"title":{},"body":{"guards/RoleGuard.html":{}}}],["constructor(userrepo",{"_index":478,"title":{},"body":{"injectables/UserService.html":{}}}],["constructor(usersservice",{"_index":155,"title":{},"body":{"injectables/AuthService.html":{}}}],["context",{"_index":107,"title":{},"body":{"guards/AuthGuard.html":{},"guards/RoleGuard.html":{}}}],["context.switchtohttp().getrequest",{"_index":116,"title":{},"body":{"guards/AuthGuard.html":{},"guards/RoleGuard.html":{}}}],["controller",{"_index":0,"title":{"controllers/AppController.html":{},"controllers/PostController.html":{},"controllers/UserController.html":{}},"body":{"controllers/AppController.html":{},"controllers/PostController.html":{},"controllers/UserController.html":{},"coverage.html":{}}}],["controller('/api/v1/users",{"_index":452,"title":{},"body":{"controllers/UserController.html":{}}}],["controller('api/v1/posts",{"_index":317,"title":{},"body":{"controllers/PostController.html":{}}}],["controllers",{"_index":2,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/PostController.html":{},"modules/PostModule.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["coverage",{"_index":509,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["create",{"_index":337,"title":{},"body":{"injectables/PostService.html":{},"injectables/UserService.html":{}}}],["create(requestbody",{"_index":344,"title":{},"body":{"injectables/PostService.html":{},"injectables/UserService.html":{}}}],["created",{"_index":199,"title":{},"body":{"injectables/AuthService.html":{}}}],["createdat",{"_index":255,"title":{},"body":{"entities/Post.html":{}}}],["createdatecolumn",{"_index":272,"title":{},"body":{"entities/Post.html":{}}}],["createparamdecorator",{"_index":623,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createpost",{"_index":284,"title":{},"body":{"controllers/PostController.html":{}}}],["createpost(requestbody",{"_index":289,"title":{},"body":{"controllers/PostController.html":{}}}],["createpostdto",{"_index":211,"title":{"classes/CreatePostDto.html":{}},"body":{"classes/CreatePostDto.html":{},"controllers/PostController.html":{},"injectables/PostService.html":{},"coverage.html":{}}}],["createuserdto",{"_index":491,"title":{},"body":{"injectables/UserService.html":{}}}],["credentials",{"_index":201,"title":{},"body":{"injectables/AuthService.html":{}}}],["crud",{"_index":357,"title":{},"body":{"injectables/PostService.html":{},"injectables/UserService.html":{}}}],["ctx",{"_index":625,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ctx.switchtohttp().getrequest",{"_index":626,"title":{},"body":{"miscellaneous/variables.html":{}}}],["currentuser",{"_index":243,"title":{},"body":{"classes/Permission.html":{},"controllers/PostController.html":{},"injectables/PostService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["currentuser.id",{"_index":247,"title":{},"body":{"classes/Permission.html":{}}}],["currentuser.role",{"_index":248,"title":{},"body":{"classes/Permission.html":{}}}],["data",{"_index":624,"title":{},"body":{"miscellaneous/variables.html":{}}}],["database",{"_index":80,"title":{},"body":{"modules/AppModule.html":{}}}],["date",{"_index":257,"title":{},"body":{"entities/Post.html":{}}}],["db",{"_index":137,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/AuthService.html":{}}}],["declarations",{"_index":33,"title":{},"body":{"modules/AppModule.html":{},"modules/PostModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["decorators",{"_index":10,"title":{},"body":{"controllers/AppController.html":{},"classes/CreatePostDto.html":{},"classes/LoginUserDto.html":{},"entities/Post.html":{},"controllers/PostController.html":{},"classes/RegisterUserDto.html":{},"classes/UpdatePostDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"controllers/UserController.html":{}}}],["decorators/currentuser.decorator",{"_index":449,"title":{},"body":{"controllers/UserController.html":{}}}],["default",{"_index":412,"title":{},"body":{"entities/User.html":{},"miscellaneous/variables.html":{}}}],["defined",{"_index":12,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/LoginUserDto.html":{},"classes/Permission.html":{},"entities/Post.html":{},"controllers/PostController.html":{},"injectables/PostService.html":{},"classes/RegisterUserDto.html":{},"guards/RoleGuard.html":{},"classes/UpdatePostDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["delete",{"_index":305,"title":{},"body":{"controllers/PostController.html":{},"injectables/PostService.html":{},"controllers/UserController.html":{}}}],["delete('/:id",{"_index":327,"title":{},"body":{"controllers/PostController.html":{},"controllers/UserController.html":{}}}],["delete('/:id')@useguards(authguard",{"_index":293,"title":{},"body":{"controllers/PostController.html":{}}}],["delete(id",{"_index":346,"title":{},"body":{"injectables/PostService.html":{}}}],["deletebyid",{"_index":473,"title":{},"body":{"injectables/UserService.html":{}}}],["deletebyid(id",{"_index":482,"title":{},"body":{"injectables/UserService.html":{}}}],["deletepost",{"_index":285,"title":{},"body":{"controllers/PostController.html":{}}}],["deletepost(@param('id",{"_index":328,"title":{},"body":{"controllers/PostController.html":{}}}],["deletepost(id",{"_index":292,"title":{},"body":{"controllers/PostController.html":{}}}],["deleteuser",{"_index":417,"title":{},"body":{"controllers/UserController.html":{}}}],["deleteuser(id",{"_index":424,"title":{},"body":{"controllers/UserController.html":{}}}],["dependencies",{"_index":31,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/PostModule.html":{},"modules/UserModule.html":{},"dependencies.html":{},"overview.html":{}}}],["description",{"_index":215,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{},"classes/UpdatePostDto.html":{},"index.html":{},"properties.html":{}}}],["development",{"_index":574,"title":{},"body":{"index.html":{}}}],["documentation",{"_index":510,"title":{},"body":{"coverage.html":{}}}],["dtos/createpost.dto",{"_index":313,"title":{},"body":{"controllers/PostController.html":{},"injectables/PostService.html":{}}}],["dtos/createuser.dto",{"_index":492,"title":{},"body":{"injectables/UserService.html":{}}}],["dtos/loginuser.dto",{"_index":169,"title":{},"body":{"injectables/AuthService.html":{},"controllers/UserController.html":{}}}],["dtos/registeruser.dto",{"_index":166,"title":{},"body":{"injectables/AuthService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["dtos/updatepost.dto",{"_index":316,"title":{},"body":{"controllers/PostController.html":{},"injectables/PostService.html":{}}}],["dtos/updateuser.dto",{"_index":447,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["e2e",{"_index":585,"title":{},"body":{"index.html":{}}}],["efficient",{"_index":561,"title":{},"body":{"index.html":{}}}],["email",{"_index":171,"title":{},"body":{"injectables/AuthService.html":{},"classes/LoginUserDto.html":{},"classes/RegisterUserDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"injectables/UserService.html":{}}}],["entities",{"_index":82,"title":{},"body":{"modules/AppModule.html":{},"entities/Post.html":{},"entities/User.html":{},"overview.html":{}}}],["entity",{"_index":253,"title":{"entities/Post.html":{},"entities/User.html":{}},"body":{"entities/Post.html":{},"entities/User.html":{},"coverage.html":{}}}],["enum",{"_index":410,"title":{},"body":{"entities/User.html":{}}}],["enumerations",{"_index":550,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["error",{"_index":148,"title":{},"body":{"guards/AuthGuard.html":{}}}],["example",{"_index":570,"title":{},"body":{"index.html":{}}}],["exclude",{"_index":408,"title":{},"body":{"entities/User.html":{}}}],["executioncontext",{"_index":105,"title":{},"body":{"guards/AuthGuard.html":{},"guards/RoleGuard.html":{},"miscellaneous/variables.html":{}}}],["exist",{"_index":172,"title":{},"body":{"injectables/AuthService.html":{}}}],["exits",{"_index":503,"title":{},"body":{"injectables/UserService.html":{}}}],["expired",{"_index":150,"title":{},"body":{"guards/AuthGuard.html":{}}}],["expiresin",{"_index":66,"title":{},"body":{"modules/AppModule.html":{}}}],["export",{"_index":20,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/LoginUserDto.html":{},"classes/Permission.html":{},"entities/Post.html":{},"controllers/PostController.html":{},"modules/PostModule.html":{},"injectables/PostService.html":{},"classes/RegisterUserDto.html":{},"guards/RoleGuard.html":{},"classes/UpdatePostDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["exports",{"_index":36,"title":{},"body":{"modules/AppModule.html":{},"modules/PostModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["express",{"_index":534,"title":{},"body":{"dependencies.html":{}}}],["file",{"_index":5,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/LoginUserDto.html":{},"classes/Permission.html":{},"entities/Post.html":{},"controllers/PostController.html":{},"modules/PostModule.html":{},"injectables/PostService.html":{},"classes/RegisterUserDto.html":{},"guards/RoleGuard.html":{},"classes/UpdatePostDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["find",{"_index":136,"title":{},"body":{"guards/AuthGuard.html":{}}}],["findall",{"_index":474,"title":{},"body":{"injectables/UserService.html":{}}}],["findbyemail",{"_index":475,"title":{},"body":{"injectables/UserService.html":{}}}],["findbyemail(email",{"_index":485,"title":{},"body":{"injectables/UserService.html":{}}}],["findbyid",{"_index":476,"title":{},"body":{"injectables/UserService.html":{}}}],["findbyid(id",{"_index":487,"title":{},"body":{"injectables/UserService.html":{}}}],["findpost",{"_index":286,"title":{},"body":{"controllers/PostController.html":{}}}],["findpost(@param('id",{"_index":322,"title":{},"body":{"controllers/PostController.html":{}}}],["findpost(id",{"_index":295,"title":{},"body":{"controllers/PostController.html":{}}}],["findposts",{"_index":287,"title":{},"body":{"controllers/PostController.html":{}}}],["firstname",{"_index":189,"title":{},"body":{"injectables/AuthService.html":{},"classes/RegisterUserDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"injectables/UserService.html":{}}}],["forbiddenexception",{"_index":109,"title":{},"body":{"guards/AuthGuard.html":{}}}],["forbiddenexception('invalid",{"_index":149,"title":{},"body":{"guards/AuthGuard.html":{}}}],["forbiddenexception('please",{"_index":124,"title":{},"body":{"guards/AuthGuard.html":{}}}],["found",{"_index":365,"title":{},"body":{"injectables/PostService.html":{}}}],["framework",{"_index":559,"title":{},"body":{"index.html":{}}}],["function",{"_index":517,"title":{},"body":{"coverage.html":{}}}],["functions",{"_index":553,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["generate",{"_index":185,"title":{},"body":{"injectables/AuthService.html":{}}}],["get('/:id",{"_index":296,"title":{},"body":{"controllers/PostController.html":{},"controllers/UserController.html":{}}}],["get('/current",{"_index":457,"title":{},"body":{"controllers/UserController.html":{}}}],["get(id",{"_index":348,"title":{},"body":{"injectables/PostService.html":{}}}],["getall",{"_index":338,"title":{},"body":{"injectables/PostService.html":{}}}],["getalluser",{"_index":418,"title":{},"body":{"controllers/UserController.html":{}}}],["getcurrentuser",{"_index":419,"title":{},"body":{"controllers/UserController.html":{}}}],["getcurrentuser(@currentuser",{"_index":458,"title":{},"body":{"controllers/UserController.html":{}}}],["getcurrentuser(currentuser",{"_index":430,"title":{},"body":{"controllers/UserController.html":{}}}],["gethello",{"_index":9,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{}}}],["getting",{"_index":555,"title":{"index.html":{}},"body":{}}],["getuser",{"_index":420,"title":{},"body":{"controllers/UserController.html":{}}}],["getuser(@param('id",{"_index":459,"title":{},"body":{"controllers/UserController.html":{}}}],["getuser(id",{"_index":434,"title":{},"body":{"controllers/UserController.html":{}}}],["global",{"_index":63,"title":{},"body":{"modules/AppModule.html":{}}}],["grow",{"_index":592,"title":{},"body":{"index.html":{}}}],["guard",{"_index":90,"title":{"guards/AuthGuard.html":{},"guards/RoleGuard.html":{}},"body":{"coverage.html":{}}}],["guards",{"_index":92,"title":{},"body":{"guards/AuthGuard.html":{},"guards/RoleGuard.html":{},"overview.html":{}}}],["hash",{"_index":177,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{}}}],["hashedpassword",{"_index":178,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{}}}],["header",{"_index":120,"title":{},"body":{"guards/AuthGuard.html":{}}}],["hello",{"_index":88,"title":{},"body":{"injectables/AppService.html":{}}}],["here",{"_index":602,"title":{},"body":{"index.html":{}}}],["host",{"_index":72,"title":{},"body":{"modules/AppModule.html":{}}}],["https://nestjs.com",{"_index":609,"title":{},"body":{"index.html":{}}}],["id",{"_index":187,"title":{},"body":{"injectables/AuthService.html":{},"classes/Permission.html":{},"entities/Post.html":{},"controllers/PostController.html":{},"injectables/PostService.html":{},"entities/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["identifier",{"_index":511,"title":{},"body":{"coverage.html":{}}}],["implements",{"_index":112,"title":{},"body":{"guards/AuthGuard.html":{},"guards/RoleGuard.html":{}}}],["import",{"_index":16,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/LoginUserDto.html":{},"classes/Permission.html":{},"entities/Post.html":{},"controllers/PostController.html":{},"modules/PostModule.html":{},"injectables/PostService.html":{},"classes/RegisterUserDto.html":{},"guards/RoleGuard.html":{},"classes/UpdatePostDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["imports",{"_index":46,"title":{},"body":{"modules/AppModule.html":{},"modules/PostModule.html":{},"modules/UserModule.html":{}}}],["index",{"_index":7,"title":{"index.html":{}},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/LoginUserDto.html":{},"classes/Permission.html":{},"entities/Post.html":{},"controllers/PostController.html":{},"injectables/PostService.html":{},"classes/RegisterUserDto.html":{},"guards/RoleGuard.html":{},"classes/UpdatePostDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["info",{"_index":3,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/LoginUserDto.html":{},"classes/Permission.html":{},"entities/Post.html":{},"controllers/PostController.html":{},"modules/PostModule.html":{},"injectables/PostService.html":{},"classes/RegisterUserDto.html":{},"guards/RoleGuard.html":{},"classes/UpdatePostDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["inject",{"_index":83,"title":{},"body":{"modules/AppModule.html":{}}}],["injectable",{"_index":84,"title":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/PostService.html":{},"injectables/UserService.html":{}},"body":{"injectables/AppService.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"injectables/PostService.html":{},"guards/RoleGuard.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["injectables",{"_index":85,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/PostService.html":{},"injectables/UserService.html":{},"overview.html":{}}}],["injectrepository",{"_index":354,"title":{},"body":{"injectables/PostService.html":{},"injectables/UserService.html":{}}}],["injectrepository(user",{"_index":493,"title":{},"body":{"injectables/UserService.html":{}}}],["installation",{"_index":569,"title":{},"body":{"index.html":{}}}],["installrunning",{"_index":572,"title":{},"body":{"index.html":{}}}],["isemail",{"_index":237,"title":{},"body":{"classes/LoginUserDto.html":{},"classes/RegisterUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["ismatchpassword",{"_index":202,"title":{},"body":{"injectables/AuthService.html":{}}}],["isnotempty",{"_index":224,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/LoginUserDto.html":{},"classes/RegisterUserDto.html":{},"classes/UpdatePostDto.html":{},"classes/UpdateUserDto.html":{}}}],["join",{"_index":599,"title":{},"body":{"index.html":{}}}],["jwt",{"_index":186,"title":{},"body":{"injectables/AuthService.html":{}}}],["jwtmodule",{"_index":56,"title":{},"body":{"modules/AppModule.html":{}}}],["jwtmodule.register",{"_index":62,"title":{},"body":{"modules/AppModule.html":{}}}],["jwtservice",{"_index":98,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/AuthService.html":{}}}],["jwtverify",{"_index":128,"title":{},"body":{"guards/AuthGuard.html":{}}}],["kamil",{"_index":606,"title":{},"body":{"index.html":{}}}],["lastname",{"_index":191,"title":{},"body":{"injectables/AuthService.html":{},"classes/RegisterUserDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"injectables/UserService.html":{}}}],["legend",{"_index":32,"title":{},"body":{"modules/AppModule.html":{},"modules/PostModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["length",{"_index":225,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/UpdatePostDto.html":{}}}],["length(4",{"_index":230,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/UpdatePostDto.html":{}}}],["license",{"_index":612,"title":{},"body":{"index.html":{},"properties.html":{}}}],["licensed",{"_index":589,"title":{},"body":{"index.html":{}}}],["login",{"_index":153,"title":{},"body":{"injectables/AuthService.html":{}}}],["login(requestbody",{"_index":158,"title":{},"body":{"injectables/AuthService.html":{}}}],["loginuser",{"_index":421,"title":{},"body":{"controllers/UserController.html":{}}}],["loginuser(@body",{"_index":465,"title":{},"body":{"controllers/UserController.html":{}}}],["loginuser(requestbody",{"_index":438,"title":{},"body":{"controllers/UserController.html":{}}}],["loginuserdto",{"_index":159,"title":{"classes/LoginUserDto.html":{}},"body":{"injectables/AuthService.html":{},"classes/LoginUserDto.html":{},"controllers/UserController.html":{},"coverage.html":{}}}],["long",{"_index":219,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/UpdatePostDto.html":{}}}],["manytoone",{"_index":273,"title":{},"body":{"entities/Post.html":{}}}],["manytoone(undefined",{"_index":266,"title":{},"body":{"entities/Post.html":{}}}],["matching",{"_index":27,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/LoginUserDto.html":{},"classes/Permission.html":{},"entities/Post.html":{},"controllers/PostController.html":{},"modules/PostModule.html":{},"injectables/PostService.html":{},"classes/RegisterUserDto.html":{},"guards/RoleGuard.html":{},"classes/UpdatePostDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["maxlength",{"_index":226,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/UpdatePostDto.html":{}}}],["maxlength(160",{"_index":231,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/UpdatePostDto.html":{}}}],["message",{"_index":218,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/UpdatePostDto.html":{}}}],["metadata",{"_index":545,"title":{},"body":{"dependencies.html":{}}}],["methods",{"_index":8,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"classes/Permission.html":{},"controllers/PostController.html":{},"injectables/PostService.html":{},"guards/RoleGuard.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["miscellaneous",{"_index":549,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["mit",{"_index":588,"title":{},"body":{"index.html":{}}}],["mod",{"_index":411,"title":{},"body":{"entities/User.html":{},"controllers/UserController.html":{},"miscellaneous/enumerations.html":{}}}],["mode",{"_index":578,"title":{},"body":{"index.html":{}}}],["module",{"_index":28,"title":{"modules/AppModule.html":{},"modules/PostModule.html":{},"modules/UserModule.html":{}},"body":{"modules/AppModule.html":{},"modules/PostModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["modules",{"_index":30,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/PostModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["more",{"_index":601,"title":{},"body":{"index.html":{}}}],["msg",{"_index":198,"title":{},"body":{"injectables/AuthService.html":{}}}],["mysql",{"_index":71,"title":{},"body":{"modules/AppModule.html":{}}}],["mysql2",{"_index":542,"title":{},"body":{"dependencies.html":{}}}],["myśliwiec",{"_index":607,"title":{},"body":{"index.html":{}}}],["name",{"_index":102,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"classes/Permission.html":{},"entities/Post.html":{},"controllers/PostController.html":{},"injectables/PostService.html":{},"guards/RoleGuard.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["nest",{"_index":566,"title":{},"body":{"index.html":{}}}],["nestframework",{"_index":611,"title":{},"body":{"index.html":{}}}],["nestjs/common",{"_index":17,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"classes/Permission.html":{},"controllers/PostController.html":{},"modules/PostModule.html":{},"injectables/PostService.html":{},"guards/RoleGuard.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["nestjs/config",{"_index":55,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":531,"title":{},"body":{"dependencies.html":{}}}],["nestjs/jwt",{"_index":57,"title":{},"body":{"modules/AppModule.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":533,"title":{},"body":{"dependencies.html":{}}}],["nestjs/swagger",{"_index":229,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/LoginUserDto.html":{},"classes/RegisterUserDto.html":{},"classes/UpdatePostDto.html":{},"classes/UpdateUserDto.html":{},"controllers/UserController.html":{},"dependencies.html":{}}}],["nestjs/typeorm",{"_index":50,"title":{},"body":{"modules/AppModule.html":{},"modules/PostModule.html":{},"injectables/PostService.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["new",{"_index":123,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"classes/Permission.html":{},"injectables/PostService.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["node.js",{"_index":558,"title":{},"body":{"index.html":{}}}],["notfoundexception",{"_index":353,"title":{},"body":{"injectables/PostService.html":{},"injectables/UserService.html":{}}}],["notfoundexception('user",{"_index":502,"title":{},"body":{"injectables/UserService.html":{}}}],["notfoundexception(`not",{"_index":364,"title":{},"body":{"injectables/PostService.html":{}}}],["npm",{"_index":571,"title":{},"body":{"index.html":{}}}],["number",{"_index":242,"title":{},"body":{"classes/Permission.html":{},"entities/Post.html":{},"controllers/PostController.html":{},"injectables/PostService.html":{},"entities/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["obj",{"_index":278,"title":{},"body":{"entities/Post.html":{}}}],["obj.user.id",{"_index":279,"title":{},"body":{"entities/Post.html":{}}}],["object",{"_index":145,"title":{},"body":{"guards/AuthGuard.html":{}}}],["observable",{"_index":380,"title":{},"body":{"guards/RoleGuard.html":{}}}],["onetomany",{"_index":407,"title":{},"body":{"entities/User.html":{}}}],["onetomany(undefined",{"_index":402,"title":{},"body":{"entities/User.html":{}}}],["open",{"_index":590,"title":{},"body":{"index.html":{}}}],["optional",{"_index":103,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"classes/Permission.html":{},"controllers/PostController.html":{},"injectables/PostService.html":{},"guards/RoleGuard.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["out",{"_index":44,"title":{},"body":{"modules/AppModule.html":{},"modules/PostModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["overview",{"_index":616,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":528,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["param",{"_index":306,"title":{},"body":{"controllers/PostController.html":{},"controllers/UserController.html":{}}}],["param('id",{"_index":325,"title":{},"body":{"controllers/PostController.html":{},"controllers/UserController.html":{}}}],["parameters",{"_index":101,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"classes/Permission.html":{},"controllers/PostController.html":{},"injectables/PostService.html":{},"guards/RoleGuard.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["parseintpipe",{"_index":307,"title":{},"body":{"controllers/PostController.html":{},"controllers/UserController.html":{}}}],["password",{"_index":78,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"classes/LoginUserDto.html":{},"classes/RegisterUserDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"injectables/UserService.html":{}}}],["payload",{"_index":130,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/AuthService.html":{}}}],["perform",{"_index":251,"title":{},"body":{"classes/Permission.html":{}}}],["permission",{"_index":238,"title":{"classes/Permission.html":{}},"body":{"classes/Permission.html":{},"injectables/PostService.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["permission.check(id",{"_index":366,"title":{},"body":{"injectables/PostService.html":{},"injectables/UserService.html":{}}}],["please",{"_index":141,"title":{},"body":{"guards/AuthGuard.html":{},"index.html":{}}}],["port",{"_index":74,"title":{},"body":{"modules/AppModule.html":{}}}],["post",{"_index":59,"title":{"entities/Post.html":{}},"body":{"modules/AppModule.html":{},"entities/Post.html":{},"controllers/PostController.html":{},"modules/PostModule.html":{},"injectables/PostService.html":{},"entities/User.html":{},"controllers/UserController.html":{},"coverage.html":{}}}],["post('/login",{"_index":439,"title":{},"body":{"controllers/UserController.html":{}}}],["post('/register",{"_index":442,"title":{},"body":{"controllers/UserController.html":{}}}],["post()@useguards(authguard",{"_index":290,"title":{},"body":{"controllers/PostController.html":{}}}],["post.controller",{"_index":333,"title":{},"body":{"modules/PostModule.html":{}}}],["post.entity",{"_index":334,"title":{},"body":{"modules/PostModule.html":{},"injectables/PostService.html":{}}}],["post.service",{"_index":312,"title":{},"body":{"controllers/PostController.html":{},"modules/PostModule.html":{}}}],["post.user",{"_index":359,"title":{},"body":{"injectables/PostService.html":{},"entities/User.html":{}}}],["post/post.entity",{"_index":60,"title":{},"body":{"modules/AppModule.html":{}}}],["post/post.module",{"_index":58,"title":{},"body":{"modules/AppModule.html":{}}}],["postcontroller",{"_index":280,"title":{"controllers/PostController.html":{}},"body":{"controllers/PostController.html":{},"modules/PostModule.html":{},"coverage.html":{}}}],["postmodule",{"_index":40,"title":{"modules/PostModule.html":{}},"body":{"modules/AppModule.html":{},"modules/PostModule.html":{},"modules.html":{},"overview.html":{}}}],["postrepo",{"_index":343,"title":{},"body":{"injectables/PostService.html":{}}}],["posts",{"_index":395,"title":{},"body":{"entities/User.html":{}}}],["postservice",{"_index":311,"title":{"injectables/PostService.html":{}},"body":{"controllers/PostController.html":{},"modules/PostModule.html":{},"injectables/PostService.html":{},"coverage.html":{},"overview.html":{}}}],["prefix",{"_index":282,"title":{},"body":{"controllers/PostController.html":{},"controllers/UserController.html":{}}}],["primarygeneratedcolumn",{"_index":262,"title":{},"body":{"entities/Post.html":{},"entities/User.html":{}}}],["private",{"_index":113,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"injectables/PostService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["process.env.jwt_secret",{"_index":134,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/AuthService.html":{}}}],["production",{"_index":580,"title":{},"body":{"index.html":{}}}],["progressive",{"_index":557,"title":{},"body":{"index.html":{}}}],["project",{"_index":591,"title":{},"body":{"index.html":{}}}],["promise",{"_index":108,"title":{},"body":{"guards/AuthGuard.html":{},"guards/RoleGuard.html":{}}}],["properties",{"_index":214,"title":{"properties.html":{}},"body":{"classes/CreatePostDto.html":{},"classes/LoginUserDto.html":{},"entities/Post.html":{},"classes/RegisterUserDto.html":{},"classes/UpdatePostDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"properties.html":{}}}],["provide",{"_index":125,"title":{},"body":{"guards/AuthGuard.html":{}}}],["providers",{"_index":35,"title":{},"body":{"modules/AppModule.html":{},"modules/PostModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["put",{"_index":308,"title":{},"body":{"controllers/PostController.html":{},"controllers/UserController.html":{}}}],["put('/:id",{"_index":324,"title":{},"body":{"controllers/PostController.html":{},"controllers/UserController.html":{}}}],["put('/:id')@useguards(authguard",{"_index":301,"title":{},"body":{"controllers/PostController.html":{}}}],["read",{"_index":600,"title":{},"body":{"index.html":{}}}],["readonly",{"_index":23,"title":{},"body":{"controllers/AppController.html":{}}}],["reflect",{"_index":544,"title":{},"body":{"dependencies.html":{}}}],["register",{"_index":154,"title":{},"body":{"injectables/AuthService.html":{}}}],["register(requestbody",{"_index":163,"title":{},"body":{"injectables/AuthService.html":{}}}],["registeruser",{"_index":422,"title":{},"body":{"controllers/UserController.html":{}}}],["registeruser(@body",{"_index":463,"title":{},"body":{"controllers/UserController.html":{}}}],["registeruser(requestbody",{"_index":441,"title":{},"body":{"controllers/UserController.html":{}}}],["registeruserdto",{"_index":164,"title":{"classes/RegisterUserDto.html":{}},"body":{"injectables/AuthService.html":{},"classes/RegisterUserDto.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["repository",{"_index":341,"title":{},"body":{"injectables/PostService.html":{},"injectables/UserService.html":{},"index.html":{}}}],["request",{"_index":115,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"guards/RoleGuard.html":{},"miscellaneous/variables.html":{}}}],["request.currentuser",{"_index":146,"title":{},"body":{"guards/AuthGuard.html":{},"miscellaneous/variables.html":{}}}],["request.headers.authorization.split",{"_index":121,"title":{},"body":{"guards/AuthGuard.html":{}}}],["requestbody",{"_index":161,"title":{},"body":{"injectables/AuthService.html":{},"controllers/PostController.html":{},"injectables/PostService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["requestbody.password",{"_index":181,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{}}}],["requestbody.role",{"_index":498,"title":{},"body":{"injectables/UserService.html":{}}}],["reset",{"_index":43,"title":{},"body":{"modules/AppModule.html":{},"modules/PostModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["results",{"_index":26,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/LoginUserDto.html":{},"classes/Permission.html":{},"entities/Post.html":{},"controllers/PostController.html":{},"modules/PostModule.html":{},"injectables/PostService.html":{},"classes/RegisterUserDto.html":{},"guards/RoleGuard.html":{},"classes/UpdatePostDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":24,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"classes/Permission.html":{},"controllers/PostController.html":{},"injectables/PostService.html":{},"guards/RoleGuard.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["returns",{"_index":14,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"classes/Permission.html":{},"controllers/PostController.html":{},"injectables/PostService.html":{},"guards/RoleGuard.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["role",{"_index":194,"title":{},"body":{"injectables/AuthService.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"injectables/UserService.html":{}}}],["roleguard",{"_index":373,"title":{"guards/RoleGuard.html":{}},"body":{"guards/RoleGuard.html":{},"controllers/UserController.html":{},"coverage.html":{}}}],["roleguard())@get('/:id",{"_index":436,"title":{},"body":{"controllers/UserController.html":{}}}],["roleguard())@useguards(authguard",{"_index":426,"title":{},"body":{"controllers/UserController.html":{}}}],["roleguard(['admin",{"_index":455,"title":{},"body":{"controllers/UserController.html":{}}}],["roles",{"_index":377,"title":{},"body":{"guards/RoleGuard.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"miscellaneous/enumerations.html":{}}}],["roles.user",{"_index":413,"title":{},"body":{"entities/User.html":{}}}],["run",{"_index":575,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":381,"title":{},"body":{"guards/RoleGuard.html":{},"dependencies.html":{}}}],["save",{"_index":182,"title":{},"body":{"injectables/AuthService.html":{}}}],["saveduser",{"_index":183,"title":{},"body":{"injectables/AuthService.html":{}}}],["saveduser.email",{"_index":193,"title":{},"body":{"injectables/AuthService.html":{}}}],["saveduser.firstname",{"_index":190,"title":{},"body":{"injectables/AuthService.html":{}}}],["saveduser.id",{"_index":188,"title":{},"body":{"injectables/AuthService.html":{}}}],["saveduser.lastname",{"_index":192,"title":{},"body":{"injectables/AuthService.html":{}}}],["saveduser.role",{"_index":195,"title":{},"body":{"injectables/AuthService.html":{}}}],["scalable",{"_index":562,"title":{},"body":{"index.html":{}}}],["schema",{"_index":275,"title":{},"body":{"entities/Post.html":{}}}],["secret",{"_index":133,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/AuthService.html":{}}}],["server",{"_index":563,"title":{},"body":{"index.html":{}}}],["side",{"_index":564,"title":{},"body":{"index.html":{}}}],["signoptions",{"_index":65,"title":{},"body":{"modules/AppModule.html":{}}}],["source",{"_index":4,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/LoginUserDto.html":{},"classes/Permission.html":{},"entities/Post.html":{},"controllers/PostController.html":{},"modules/PostModule.html":{},"injectables/PostService.html":{},"classes/RegisterUserDto.html":{},"guards/RoleGuard.html":{},"classes/UpdatePostDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"index.html":{}}}],["sponsors",{"_index":594,"title":{},"body":{"index.html":{}}}],["src/.../currentuser.decorator.ts",{"_index":622,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../main.ts",{"_index":554,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../user.entity.ts",{"_index":551,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/app.controller.ts",{"_index":6,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["src/app.controller.ts:9",{"_index":13,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app.module.ts",{"_index":45,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app.service.ts",{"_index":86,"title":{},"body":{"injectables/AppService.html":{},"coverage.html":{}}}],["src/app.service.ts:5",{"_index":87,"title":{},"body":{"injectables/AppService.html":{}}}],["src/guards/auth.guard",{"_index":315,"title":{},"body":{"controllers/PostController.html":{},"controllers/UserController.html":{}}}],["src/guards/auth.guard.ts",{"_index":93,"title":{},"body":{"guards/AuthGuard.html":{},"coverage.html":{}}}],["src/guards/auth.guard.ts:12",{"_index":100,"title":{},"body":{"guards/AuthGuard.html":{}}}],["src/guards/auth.guard.ts:18",{"_index":106,"title":{},"body":{"guards/AuthGuard.html":{}}}],["src/guards/role.guard",{"_index":450,"title":{},"body":{"controllers/UserController.html":{}}}],["src/guards/role.guard.ts",{"_index":374,"title":{},"body":{"guards/RoleGuard.html":{},"coverage.html":{}}}],["src/guards/role.guard.ts:5",{"_index":376,"title":{},"body":{"guards/RoleGuard.html":{}}}],["src/guards/role.guard.ts:7",{"_index":378,"title":{},"body":{"guards/RoleGuard.html":{}}}],["src/helpers/checkpermission.helper",{"_index":355,"title":{},"body":{"injectables/PostService.html":{},"injectables/UserService.html":{}}}],["src/helpers/checkpermission.helper.ts",{"_index":239,"title":{},"body":{"classes/Permission.html":{},"coverage.html":{}}}],["src/helpers/checkpermission.helper.ts:5",{"_index":244,"title":{},"body":{"classes/Permission.html":{}}}],["src/main.ts",{"_index":516,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/post/dtos/createpost.dto.ts",{"_index":213,"title":{},"body":{"classes/CreatePostDto.html":{},"coverage.html":{}}}],["src/post/dtos/createpost.dto.ts:14",{"_index":220,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["src/post/dtos/createpost.dto.ts:8",{"_index":223,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["src/post/dtos/updatepost.dto.ts",{"_index":383,"title":{},"body":{"classes/UpdatePostDto.html":{},"coverage.html":{}}}],["src/post/dtos/updatepost.dto.ts:14",{"_index":384,"title":{},"body":{"classes/UpdatePostDto.html":{}}}],["src/post/dtos/updatepost.dto.ts:8",{"_index":385,"title":{},"body":{"classes/UpdatePostDto.html":{}}}],["src/post/post.controller.ts",{"_index":281,"title":{},"body":{"controllers/PostController.html":{},"coverage.html":{}}}],["src/post/post.controller.ts:28",{"_index":291,"title":{},"body":{"controllers/PostController.html":{}}}],["src/post/post.controller.ts:36",{"_index":298,"title":{},"body":{"controllers/PostController.html":{}}}],["src/post/post.controller.ts:41",{"_index":297,"title":{},"body":{"controllers/PostController.html":{}}}],["src/post/post.controller.ts:47",{"_index":302,"title":{},"body":{"controllers/PostController.html":{}}}],["src/post/post.controller.ts:57",{"_index":294,"title":{},"body":{"controllers/PostController.html":{}}}],["src/post/post.entity",{"_index":409,"title":{},"body":{"entities/User.html":{}}}],["src/post/post.entity.ts",{"_index":254,"title":{},"body":{"entities/Post.html":{},"coverage.html":{}}}],["src/post/post.entity.ts:14",{"_index":263,"title":{},"body":{"entities/Post.html":{}}}],["src/post/post.entity.ts:17",{"_index":264,"title":{},"body":{"entities/Post.html":{}}}],["src/post/post.entity.ts:20",{"_index":261,"title":{},"body":{"entities/Post.html":{}}}],["src/post/post.entity.ts:24",{"_index":259,"title":{},"body":{"entities/Post.html":{}}}],["src/post/post.entity.ts:28",{"_index":265,"title":{},"body":{"entities/Post.html":{}}}],["src/post/post.entity.ts:32",{"_index":269,"title":{},"body":{"entities/Post.html":{}}}],["src/post/post.module.ts",{"_index":332,"title":{},"body":{"modules/PostModule.html":{}}}],["src/post/post.service.ts",{"_index":336,"title":{},"body":{"injectables/PostService.html":{},"coverage.html":{}}}],["src/post/post.service.ts:11",{"_index":342,"title":{},"body":{"injectables/PostService.html":{}}}],["src/post/post.service.ts:15",{"_index":345,"title":{},"body":{"injectables/PostService.html":{}}}],["src/post/post.service.ts:23",{"_index":350,"title":{},"body":{"injectables/PostService.html":{}}}],["src/post/post.service.ts:27",{"_index":349,"title":{},"body":{"injectables/PostService.html":{}}}],["src/post/post.service.ts:31",{"_index":352,"title":{},"body":{"injectables/PostService.html":{}}}],["src/post/post.service.ts:45",{"_index":347,"title":{},"body":{"injectables/PostService.html":{}}}],["src/user/auth.service.ts",{"_index":152,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["src/user/auth.service.ts:14",{"_index":165,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/user/auth.service.ts:45",{"_index":160,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/user/auth.service.ts:9",{"_index":156,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/user/decorators/currentuser.decorator",{"_index":314,"title":{},"body":{"controllers/PostController.html":{}}}],["src/user/decorators/currentuser.decorator.ts",{"_index":522,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/user/dtos/loginuser.dto.ts",{"_index":232,"title":{},"body":{"classes/LoginUserDto.html":{},"coverage.html":{}}}],["src/user/dtos/loginuser.dto.ts:11",{"_index":236,"title":{},"body":{"classes/LoginUserDto.html":{}}}],["src/user/dtos/loginuser.dto.ts:7",{"_index":234,"title":{},"body":{"classes/LoginUserDto.html":{}}}],["src/user/dtos/registeruser.dto.ts",{"_index":368,"title":{},"body":{"classes/RegisterUserDto.html":{},"coverage.html":{}}}],["src/user/dtos/registeruser.dto.ts:11",{"_index":370,"title":{},"body":{"classes/RegisterUserDto.html":{}}}],["src/user/dtos/registeruser.dto.ts:15",{"_index":371,"title":{},"body":{"classes/RegisterUserDto.html":{}}}],["src/user/dtos/registeruser.dto.ts:19",{"_index":372,"title":{},"body":{"classes/RegisterUserDto.html":{}}}],["src/user/dtos/registeruser.dto.ts:7",{"_index":369,"title":{},"body":{"classes/RegisterUserDto.html":{}}}],["src/user/dtos/updateuser.dto.ts",{"_index":387,"title":{},"body":{"classes/UpdateUserDto.html":{},"coverage.html":{}}}],["src/user/dtos/updateuser.dto.ts:12",{"_index":389,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["src/user/dtos/updateuser.dto.ts:16",{"_index":390,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["src/user/dtos/updateuser.dto.ts:20",{"_index":391,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["src/user/dtos/updateuser.dto.ts:22",{"_index":392,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["src/user/dtos/updateuser.dto.ts:8",{"_index":388,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["src/user/user.controller.ts",{"_index":415,"title":{},"body":{"controllers/UserController.html":{},"coverage.html":{}}}],["src/user/user.controller.ts:37",{"_index":429,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.controller.ts:44",{"_index":433,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.controller.ts:51",{"_index":437,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.controller.ts:59",{"_index":446,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.controller.ts:71",{"_index":427,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.controller.ts:79",{"_index":443,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.controller.ts:83",{"_index":440,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.entity",{"_index":246,"title":{},"body":{"classes/Permission.html":{},"entities/Post.html":{},"controllers/PostController.html":{},"modules/PostModule.html":{},"injectables/PostService.html":{}}}],["src/user/user.entity.ts",{"_index":394,"title":{},"body":{"entities/User.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["src/user/user.entity.ts:14",{"_index":398,"title":{},"body":{"entities/User.html":{}}}],["src/user/user.entity.ts:17",{"_index":397,"title":{},"body":{"entities/User.html":{}}}],["src/user/user.entity.ts:20",{"_index":399,"title":{},"body":{"entities/User.html":{}}}],["src/user/user.entity.ts:23",{"_index":396,"title":{},"body":{"entities/User.html":{}}}],["src/user/user.entity.ts:27",{"_index":401,"title":{},"body":{"entities/User.html":{}}}],["src/user/user.entity.ts:31",{"_index":406,"title":{},"body":{"entities/User.html":{}}}],["src/user/user.entity.ts:34",{"_index":403,"title":{},"body":{"entities/User.html":{}}}],["src/user/user.module.ts",{"_index":469,"title":{},"body":{"modules/UserModule.html":{}}}],["src/user/user.service",{"_index":111,"title":{},"body":{"guards/AuthGuard.html":{},"modules/PostModule.html":{}}}],["src/user/user.service.ts",{"_index":472,"title":{},"body":{"injectables/UserService.html":{},"coverage.html":{}}}],["src/user/user.service.ts:16",{"_index":479,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:22",{"_index":481,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:29",{"_index":484,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:33",{"_index":488,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:37",{"_index":486,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:41",{"_index":490,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:68",{"_index":483,"title":{},"body":{"injectables/UserService.html":{}}}],["start",{"_index":576,"title":{},"body":{"index.html":{}}}],["start:dev",{"_index":579,"title":{},"body":{"index.html":{}}}],["start:prodtest",{"_index":581,"title":{},"body":{"index.html":{}}}],["started",{"_index":556,"title":{"index.html":{}},"body":{}}],["starter",{"_index":568,"title":{},"body":{"index.html":{}}}],["statements",{"_index":512,"title":{},"body":{"coverage.html":{}}}],["static",{"_index":240,"title":{},"body":{"classes/Permission.html":{}}}],["stay",{"_index":603,"title":{},"body":{"index.html":{}}}],["string",{"_index":15,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"classes/CreatePostDto.html":{},"classes/LoginUserDto.html":{},"entities/Post.html":{},"classes/RegisterUserDto.html":{},"guards/RoleGuard.html":{},"classes/UpdatePostDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"injectables/UserService.html":{}}}],["successfully",{"_index":210,"title":{},"body":{"injectables/AuthService.html":{}}}],["support",{"_index":595,"title":{},"body":{"index.html":{},"modules.html":{}}}],["svg",{"_index":614,"title":{},"body":{"modules.html":{}}}],["table",{"_index":527,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":526,"title":{},"body":{"coverage.html":{}}}],["test",{"_index":584,"title":{},"body":{"index.html":{}}}],["test:covsupport",{"_index":587,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":586,"title":{},"body":{"index.html":{}}}],["test_nestjs",{"_index":276,"title":{},"body":{"entities/Post.html":{}}}],["tests",{"_index":583,"title":{},"body":{"index.html":{}}}],["thanks",{"_index":593,"title":{},"body":{"index.html":{}}}],["this.appservice.gethello",{"_index":25,"title":{},"body":{"controllers/AppController.html":{}}}],["this.authserivce.login(requestbody",{"_index":466,"title":{},"body":{"controllers/UserController.html":{}}}],["this.authserivce.register(requestbody",{"_index":464,"title":{},"body":{"controllers/UserController.html":{}}}],["this.findbyid(id",{"_index":501,"title":{},"body":{"injectables/UserService.html":{}}}],["this.get(id",{"_index":363,"title":{},"body":{"injectables/PostService.html":{}}}],["this.jwtservice.signasync(payload",{"_index":197,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.jwtservice.verifyasync(token",{"_index":132,"title":{},"body":{"guards/AuthGuard.html":{}}}],["this.postrepo.create(requestbody",{"_index":358,"title":{},"body":{"injectables/PostService.html":{}}}],["this.postrepo.find",{"_index":361,"title":{},"body":{"injectables/PostService.html":{}}}],["this.postrepo.findoneby",{"_index":362,"title":{},"body":{"injectables/PostService.html":{}}}],["this.postrepo.remove(post",{"_index":367,"title":{},"body":{"injectables/PostService.html":{}}}],["this.postrepo.save(post",{"_index":360,"title":{},"body":{"injectables/PostService.html":{}}}],["this.postservice.create(requestbody",{"_index":320,"title":{},"body":{"controllers/PostController.html":{}}}],["this.postservice.delete(id",{"_index":329,"title":{},"body":{"controllers/PostController.html":{}}}],["this.postservice.get(id",{"_index":323,"title":{},"body":{"controllers/PostController.html":{}}}],["this.postservice.getall",{"_index":321,"title":{},"body":{"controllers/PostController.html":{}}}],["this.postservice.update(id",{"_index":326,"title":{},"body":{"controllers/PostController.html":{}}}],["this.roles.includes(request.currentuser.role.tolowercase",{"_index":382,"title":{},"body":{"guards/RoleGuard.html":{}}}],["this.userrepo.create(requestbody",{"_index":494,"title":{},"body":{"injectables/UserService.html":{}}}],["this.userrepo.find",{"_index":496,"title":{},"body":{"injectables/UserService.html":{}}}],["this.userrepo.findoneby",{"_index":497,"title":{},"body":{"injectables/UserService.html":{}}}],["this.userrepo.remove(user",{"_index":508,"title":{},"body":{"injectables/UserService.html":{}}}],["this.userrepo.save(user",{"_index":495,"title":{},"body":{"injectables/UserService.html":{}}}],["this.userservice.deletebyid(id",{"_index":462,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.findall",{"_index":456,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.findbyemail(payload.email",{"_index":139,"title":{},"body":{"guards/AuthGuard.html":{}}}],["this.userservice.findbyid(id",{"_index":460,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.updatebyid(id",{"_index":461,"title":{},"body":{"controllers/UserController.html":{}}}],["this.usersservice.create(requestbody",{"_index":184,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.usersservice.findbyemail(requestbody.email",{"_index":174,"title":{},"body":{"injectables/AuthService.html":{}}}],["throw",{"_index":122,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"classes/Permission.html":{},"injectables/PostService.html":{},"injectables/UserService.html":{}}}],["title",{"_index":216,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{},"classes/UpdatePostDto.html":{}}}],["token",{"_index":119,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/AuthService.html":{}}}],["touch",{"_index":604,"title":{},"body":{"index.html":{}}}],["transform",{"_index":270,"title":{},"body":{"entities/Post.html":{}}}],["transformer",{"_index":271,"title":{},"body":{"entities/Post.html":{},"entities/User.html":{},"dependencies.html":{}}}],["true",{"_index":64,"title":{},"body":{"modules/AppModule.html":{},"guards/AuthGuard.html":{}}}],["try",{"_index":117,"title":{},"body":{"guards/AuthGuard.html":{}}}],["twitter",{"_index":610,"title":{},"body":{"index.html":{}}}],["type",{"_index":70,"title":{},"body":{"modules/AppModule.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/LoginUserDto.html":{},"classes/Permission.html":{},"entities/Post.html":{},"controllers/PostController.html":{},"injectables/PostService.html":{},"classes/RegisterUserDto.html":{},"guards/RoleGuard.html":{},"classes/UpdatePostDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["typeorm",{"_index":274,"title":{},"body":{"entities/Post.html":{},"injectables/PostService.html":{},"entities/User.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["typeormmodule",{"_index":49,"title":{},"body":{"modules/AppModule.html":{},"modules/PostModule.html":{},"modules/UserModule.html":{}}}],["typeormmodule.forfeature([post",{"_index":335,"title":{},"body":{"modules/PostModule.html":{}}}],["typeormmodule.forfeature([user",{"_index":471,"title":{},"body":{"modules/UserModule.html":{}}}],["typeormmodule.forrootasync",{"_index":68,"title":{},"body":{"modules/AppModule.html":{}}}],["types/bcrypt",{"_index":537,"title":{},"body":{"dependencies.html":{}}}],["typescript",{"_index":567,"title":{},"body":{"index.html":{}}}],["undefined.id",{"_index":268,"title":{},"body":{"entities/Post.html":{}}}],["undefined})@exclude",{"_index":405,"title":{},"body":{"entities/User.html":{}}}],["unit",{"_index":582,"title":{},"body":{"index.html":{}}}],["unknown",{"_index":162,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PostService.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["unlicensed",{"_index":620,"title":{},"body":{"properties.html":{}}}],["update",{"_index":339,"title":{},"body":{"injectables/PostService.html":{}}}],["update(id",{"_index":351,"title":{},"body":{"injectables/PostService.html":{}}}],["updateat",{"_index":256,"title":{},"body":{"entities/Post.html":{}}}],["updatebyid",{"_index":477,"title":{},"body":{"injectables/UserService.html":{}}}],["updatebyid(id",{"_index":489,"title":{},"body":{"injectables/UserService.html":{}}}],["updateduser",{"_index":504,"title":{},"body":{"injectables/UserService.html":{}}}],["updateduser.email",{"_index":507,"title":{},"body":{"injectables/UserService.html":{}}}],["updateduser.firstname",{"_index":505,"title":{},"body":{"injectables/UserService.html":{}}}],["updateduser.lastname",{"_index":506,"title":{},"body":{"injectables/UserService.html":{}}}],["updatepost",{"_index":288,"title":{},"body":{"controllers/PostController.html":{}}}],["updatepost(id",{"_index":299,"title":{},"body":{"controllers/PostController.html":{}}}],["updatepostdto",{"_index":300,"title":{"classes/UpdatePostDto.html":{}},"body":{"controllers/PostController.html":{},"injectables/PostService.html":{},"classes/UpdatePostDto.html":{},"coverage.html":{}}}],["updateuser",{"_index":423,"title":{},"body":{"controllers/UserController.html":{}}}],["updateuser(id",{"_index":444,"title":{},"body":{"controllers/UserController.html":{}}}],["updateuserdto",{"_index":386,"title":{"classes/UpdateUserDto.html":{}},"body":{"classes/UpdateUserDto.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["usefactory",{"_index":69,"title":{},"body":{"modules/AppModule.html":{}}}],["useguards",{"_index":309,"title":{},"body":{"controllers/PostController.html":{},"controllers/UserController.html":{}}}],["useguards(authguard",{"_index":319,"title":{},"body":{"controllers/PostController.html":{},"controllers/UserController.html":{}}}],["useguards(new",{"_index":454,"title":{},"body":{"controllers/UserController.html":{}}}],["useinterceptors",{"_index":310,"title":{},"body":{"controllers/PostController.html":{},"controllers/UserController.html":{}}}],["useinterceptors(classserializerinterceptor",{"_index":318,"title":{},"body":{"controllers/PostController.html":{},"controllers/UserController.html":{}}}],["user",{"_index":51,"title":{"entities/User.html":{}},"body":{"modules/AppModule.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"classes/Permission.html":{},"entities/Post.html":{},"controllers/PostController.html":{},"modules/PostModule.html":{},"injectables/PostService.html":{},"entities/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["user')@useguards(authguard",{"_index":432,"title":{},"body":{"controllers/UserController.html":{}}}],["user.controller",{"_index":470,"title":{},"body":{"modules/UserModule.html":{}}}],["user.entity",{"_index":393,"title":{},"body":{"classes/UpdateUserDto.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["user.posts",{"_index":277,"title":{},"body":{"entities/Post.html":{}}}],["user.posts)@transform",{"_index":267,"title":{},"body":{"entities/Post.html":{}}}],["user.service",{"_index":167,"title":{},"body":{"injectables/AuthService.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{}}}],["user/user.entity",{"_index":52,"title":{},"body":{"modules/AppModule.html":{}}}],["user/user.module",{"_index":48,"title":{},"body":{"modules/AppModule.html":{}}}],["userbyemail",{"_index":173,"title":{},"body":{"injectables/AuthService.html":{}}}],["userbyemail.email",{"_index":208,"title":{},"body":{"injectables/AuthService.html":{}}}],["userbyemail.firstname",{"_index":206,"title":{},"body":{"injectables/AuthService.html":{}}}],["userbyemail.id",{"_index":205,"title":{},"body":{"injectables/AuthService.html":{}}}],["userbyemail.lastname",{"_index":207,"title":{},"body":{"injectables/AuthService.html":{}}}],["userbyemail.password",{"_index":204,"title":{},"body":{"injectables/AuthService.html":{}}}],["userbyemail.role",{"_index":209,"title":{},"body":{"injectables/AuthService.html":{}}}],["usercontroller",{"_index":414,"title":{"controllers/UserController.html":{}},"body":{"controllers/UserController.html":{},"modules/UserModule.html":{},"coverage.html":{}}}],["usermodule",{"_index":41,"title":{"modules/UserModule.html":{}},"body":{"modules/AppModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["username",{"_index":76,"title":{},"body":{"modules/AppModule.html":{}}}],["userrepo",{"_index":480,"title":{},"body":{"injectables/UserService.html":{}}}],["userservice",{"_index":99,"title":{"injectables/UserService.html":{}},"body":{"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"modules/PostModule.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"overview.html":{}}}],["usersservice",{"_index":157,"title":{},"body":{"injectables/AuthService.html":{}}}],["validate",{"_index":129,"title":{},"body":{"guards/AuthGuard.html":{}}}],["validator",{"_index":227,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/LoginUserDto.html":{},"classes/RegisterUserDto.html":{},"classes/UpdatePostDto.html":{},"classes/UpdateUserDto.html":{},"dependencies.html":{}}}],["value",{"_index":552,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["variable",{"_index":523,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":621,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["version",{"_index":618,"title":{},"body":{"properties.html":{}}}],["void",{"_index":245,"title":{},"body":{"classes/Permission.html":{}}}],["watch",{"_index":577,"title":{},"body":{"index.html":{}}}],["website",{"_index":608,"title":{},"body":{"index.html":{}}}],["world",{"_index":89,"title":{},"body":{"injectables/AppService.html":{}}}],["you'd",{"_index":598,"title":{},"body":{"index.html":{}}}],["zoom",{"_index":42,"title":{},"body":{"modules/AppModule.html":{},"modules/PostModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.controller.ts\n        \n\n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        getHello\n                        \n                    \n                \n            \n            \n                \n                        \n                    getHello()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/app.controller.ts:9\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         string\n\n                        \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get } from '@nestjs/common';\nimport { AppService } from './app.service';\n\n@Controller()\nexport class AppController {\n  constructor(private readonly appService: AppService) {}\n\n  @Get()\n  getHello(): string {\n    return this.appService.getHello();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\n\nPostModule\n\nPostModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nPostModule->AppModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nAppModule -->\n\nUserModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AppService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            PostModule\n                        \n                        \n                            UserModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { AppController } from './app.controller';\nimport { AppService } from './app.service';\nimport { UserModule } from './user/user.module';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { User } from './user/user.entity';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\nimport { JwtModule } from '@nestjs/jwt';\nimport { PostModule } from './post/post.module';\nimport { Post } from './post/post.entity';\n\n@Module({\n  imports: [\n    ConfigModule.forRoot(),\n    JwtModule.register({\n      global: true,\n      signOptions: { expiresIn: '1d' },\n    }),\n    TypeOrmModule.forRootAsync({\n      imports: [ConfigModule],\n      useFactory: (configService: ConfigService) => ({\n        type: 'mysql',\n        host: configService.get('DB_HOST'),\n        port: +configService.get('DB_PORT'),\n        username: configService.get('DB_USERNAME'),\n        password: configService.get('DB_PASSWORD'),\n        database: configService.get('DB_DATABASE_NAME'),\n        entities: [User, Post],\n      }),\n      inject: [ConfigService],\n    }),\n    UserModule,\n    PostModule,\n  ],\n  controllers: [AppController],\n  providers: [AppService],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppService.html":{"url":"injectables/AppService.html","title":"injectable - AppService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AppService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getHello\n                        \n                    \n                \n            \n            \n                \ngetHello()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app.service.ts:5\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         string\n\n                        \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class AppService {\n  getHello(): string {\n    return 'Hello World!';\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/AuthGuard.html":{"url":"guards/AuthGuard.html","title":"guard - AuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n    Guards\n    AuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/guards/auth.guard.ts\n            \n\n\n\n\n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    Constructor\n        \n            \n                \n                    \nconstructor(jwtService: JwtService, userService: UserService)\n                    \n                \n                        \n                            \n                                Defined in src/guards/auth.guard.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UserService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        canActivate\n                        \n                    \n                \n            \n            \n                \n                        \n                    canActivate(context: ExecutionContext)\n                \n            \n\n\n                    \n                        \n                            Defined in src/guards/auth.guard.ts:18\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n        \n\n\n        \n            import {\n  Injectable,\n  CanActivate,\n  ExecutionContext,\n  ForbiddenException,\n  BadRequestException,\n} from '@nestjs/common';\nimport { JwtService } from '@nestjs/jwt';\nimport { UserService } from 'src/user/user.service';\n\n@Injectable()\nexport class AuthGuard implements CanActivate {\n  constructor(\n    private jwtService: JwtService,\n    private userService: UserService,\n  ) {}\n\n  async canActivate(context: ExecutionContext): Promise {\n    const request = context.switchToHttp().getRequest();\n\n    try {\n      // 1) Get token from header\n      const token = request.headers.authorization.split(' ')[1];\n\n      if (!token) {\n        throw new ForbiddenException('Please provide access token!');\n      }\n\n      // 2) jwtVerify validate token\n      const payload = await this.jwtService.verifyAsync(token, {\n        secret: process.env.JWT_SECRET,\n      });\n      // 3) find user in db based on jwtVerify\n      const user = await this.userService.findByEmail(payload.email);\n      if (!user) {\n        throw new BadRequestException(\n          'User not belong to token, please try again',\n        );\n      }\n      // 4) Assign user to request object\n      request.currentUser = user;\n    } catch (error) {\n      throw new ForbiddenException('Invalid token or expired!');\n    }\n    return true;\n  }\n}\n\n        \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/auth.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                login\n                            \n                            \n                                    Async\n                                register\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(usersService: UserService, jwtService: JwtService)\n                    \n                \n                        \n                            \n                                Defined in src/user/auth.service.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UserService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        login\n                        \n                    \n                \n            \n            \n                \n                        \n                    login(requestBody: LoginUserDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/user/auth.service.ts:45\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                requestBody\n                                            \n                                                            LoginUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        register\n                        \n                    \n                \n            \n            \n                \n                        \n                    register(requestBody: RegisterUserDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/user/auth.service.ts:14\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                requestBody\n                                            \n                                                            RegisterUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { BadRequestException, Injectable, Request } from '@nestjs/common';\nimport { JwtService } from '@nestjs/jwt';\nimport { RegisterUserDto } from './dtos/registerUser.dto';\nimport { UserService } from './user.service';\nimport * as bcrypt from 'bcrypt';\nimport { LoginUserDto } from './dtos/loginUser.dto';\n\n@Injectable()\nexport class AuthService {\n  constructor(\n    private usersService: UserService,\n    private jwtService: JwtService,\n  ) {}\n  async register(requestBody: RegisterUserDto) {\n    // check email is exist\n    const userByEmail = await this.usersService.findByEmail(requestBody.email);\n    if (userByEmail) {\n      throw new BadRequestException('Email already exist!');\n    }\n    //hash password\n    const hashedPassword = await bcrypt.hash(requestBody.password, 10);\n\n    requestBody.password = hashedPassword;\n\n    //save to db\n    const savedUser = await this.usersService.create(requestBody);\n\n    //generate jwt token\n    const payload = {\n      id: savedUser.id,\n      firstName: savedUser.firstName,\n      lastName: savedUser.lastName,\n      email: savedUser.email,\n      role: savedUser.role,\n    };\n    const access_token = await this.jwtService.signAsync(payload, {\n      secret: process.env.JWT_SECRET,\n    });\n\n    return {\n      msg: 'User has been created!',\n      access_token,\n    };\n  }\n  async login(requestBody: LoginUserDto) {\n    const userByEmail = await this.usersService.findByEmail(requestBody.email);\n    if (!userByEmail) {\n      throw new BadRequestException('Invalid Credentials!');\n    }\n    //check password\n    const isMatchPassword = await bcrypt.compare(\n      requestBody.password,\n      userByEmail.password,\n    );\n\n    if (!isMatchPassword) {\n      throw new BadRequestException('Invalid Credentials!');\n    }\n    //generate jwt token\n    const payload = {\n      id: userByEmail.id,\n      firstName: userByEmail.firstName,\n      lastName: userByEmail.lastName,\n      email: userByEmail.email,\n      role: userByEmail.role,\n    };\n    const access_token = await this.jwtService.signAsync(payload, {\n      secret: process.env.JWT_SECRET,\n    });\n    return {\n      msg: 'User has been login successfully!',\n      access_token,\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreatePostDto.html":{"url":"classes/CreatePostDto.html","title":"class - CreatePostDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreatePostDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/post/dtos/createPost.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                description\n                            \n                            \n                                    \n                                    \n                                    \n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@MaxLength(160, {message: 'Description is too long !'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/post/dtos/createPost.dto.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsNotEmpty()@Length(4, 60)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/post/dtos/createPost.dto.ts:8\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNotEmpty, Length, MaxLength } from 'class-validator';\nimport { ApiProperty } from '@nestjs/swagger';\n\nexport class CreatePostDto {\n  @ApiProperty()\n  @IsNotEmpty()\n  @Length(4, 60)\n  title: string;\n  \n  @ApiProperty()\n  @MaxLength(160, {\n    message: 'Description is too long !'\n  })\n  description: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LoginUserDto.html":{"url":"classes/LoginUserDto.html","title":"class - LoginUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LoginUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/dtos/loginUser.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                email\n                            \n                            \n                                    \n                                    \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsEmail()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dtos/loginUser.dto.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dtos/loginUser.dto.ts:11\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { IsEmail, IsNotEmpty } from 'class-validator';\n\nexport class LoginUserDto {\n  @ApiProperty()\n  @IsEmail()\n  email: string;\n\n  @ApiProperty()\n  @IsNotEmpty()\n  password: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Permission.html":{"url":"classes/Permission.html","title":"class - Permission","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Permission\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/helpers/checkPermission.helper.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                check\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        check\n                        \n                    \n                \n            \n            \n                \n                        \n                    check(id: number, currentUser: User)\n                \n            \n\n\n                    \n                        \n                            Defined in src/helpers/checkPermission.helper.ts:5\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                currentUser\n                                            \n                                                            User\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { BadRequestException } from '@nestjs/common';\nimport { User } from 'src/user/user.entity';\n\nexport class Permission {\n  static check(id: number, currentUser: User) {\n    if (id !== currentUser.id) return;\n    if (currentUser.role === 'ADMIN') return;\n\n    throw new BadRequestException('User can not perform action!');\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Post.html":{"url":"entities/Post.html","title":"entity - Post","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Post\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/post/post.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                createdAt\n                            \n                            \n                                    \n                                description\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                title\n                            \n                            \n                                    \n                                    \n                                updateAt\n                            \n                            \n                                    \n                                    \n                                user\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()@CreateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/post/post.entity.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/post/post.entity.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/post/post.entity.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/post/post.entity.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        updateAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()@CreateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/post/post.entity.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        user\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, user => user.posts)@Transform( => undefined.id)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/post/post.entity.ts:32\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Transform } from 'class-transformer';\nimport { User } from 'src/user/user.entity';\nimport {\n  Column,\n  CreateDateColumn,\n  Entity,\n  ManyToOne,\n  PrimaryGeneratedColumn,\n} from 'typeorm';\n\n@Entity({ name: 'post', schema: 'test_nestjs' })\nexport class Post {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column()\n  title: string;\n\n  @Column()\n  description: string;\n\n  @Column()\n  @CreateDateColumn()\n  createdAt: Date;\n\n  @Column()\n  @CreateDateColumn()\n  updateAt: Date;\n\n  @ManyToOne(() => User, (user) => user.posts)\n  @Transform(({ obj }) => obj.user.id)\n  user: User;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/PostController.html":{"url":"controllers/PostController.html","title":"controller - PostController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  PostController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/post/post.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                api/v1/posts\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                createPost\n                            \n                            \n                                    \n                                    \n                                deletePost\n                            \n                            \n                                    \n                                findPost\n                            \n                            \n                                    \n                                findPosts\n                            \n                            \n                                    \n                                    \n                                updatePost\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        createPost\n                        \n                    \n                \n            \n            \n                \n                        \n                    createPost(requestBody: CreatePostDto, currentUser: User)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()@UseGuards(AuthGuard)\n                \n            \n\n                    \n                        \n                            Defined in src/post/post.controller.ts:28\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                requestBody\n                                            \n                                                            CreatePostDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                currentUser\n                                            \n                                                            User\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        deletePost\n                        \n                    \n                \n            \n            \n                \n                        \n                    deletePost(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete('/:id')@UseGuards(AuthGuard)\n                \n            \n\n                    \n                        \n                            Defined in src/post/post.controller.ts:57\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        findPost\n                        \n                    \n                \n            \n            \n                \n                        \n                    findPost(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/:id')\n                \n            \n\n                    \n                        \n                            Defined in src/post/post.controller.ts:41\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        findPosts\n                        \n                    \n                \n            \n            \n                \n                        \n                    findPosts()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/post/post.controller.ts:36\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        updatePost\n                        \n                    \n                \n            \n            \n                \n                        \n                    updatePost(id: number, requestBody: UpdatePostDto, currentUser: User)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put('/:id')@UseGuards(AuthGuard)\n                \n            \n\n                    \n                        \n                            Defined in src/post/post.controller.ts:47\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                requestBody\n                                            \n                                                            UpdatePostDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                currentUser\n                                            \n                                                            User\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  ClassSerializerInterceptor,\n  Controller,\n  Delete,\n  Get,\n  Param,\n  ParseIntPipe,\n  Post,\n  Put,\n  UseGuards,\n  UseInterceptors,\n} from '@nestjs/common';\nimport { PostService } from './post.service';\nimport { CreatePostDto } from './dtos/createPost.dto';\nimport { CurrentUser } from 'src/user/decorators/currentUser.decorator';\nimport { User } from 'src/user/user.entity';\nimport { AuthGuard } from 'src/guards/auth.guard';\nimport { UpdatePostDto } from './dtos/updatePost.dto';\n\n@Controller('api/v1/posts')\n@UseInterceptors(ClassSerializerInterceptor)\nexport class PostController {\n  constructor(private postService: PostService) {}\n\n  @Post()\n  @UseGuards(AuthGuard)\n  createPost(\n    @Body() requestBody: CreatePostDto,\n    @CurrentUser() currentUser: User,\n  ) {\n    return this.postService.create(requestBody, currentUser);\n  }\n\n  @Get()\n  findPosts() {\n    return this.postService.getAll();\n  }\n\n  @Get('/:id')\n  findPost(@Param('id', ParseIntPipe) id: number) {\n    return this.postService.get(id);\n  }\n\n  @Put('/:id')\n  @UseGuards(AuthGuard)\n  updatePost(\n    @Param('id', ParseIntPipe) id: number,\n    @Body() requestBody: UpdatePostDto,\n    @CurrentUser() currentUser: User,\n  ) {\n    return this.postService.update(id, requestBody, currentUser);\n  }\n\n  @Delete('/:id')\n  @UseGuards(AuthGuard)\n  deletePost(@Param('id', ParseIntPipe) id: number) {\n    return this.postService.delete(id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/PostModule.html":{"url":"modules/PostModule.html","title":"module - PostModule","body":"\n                   \n\n\n\n\n    Modules\n    PostModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_PostModule\n\n\n\ncluster_PostModule_providers\n\n\n\n\nPostService\n\nPostService\n\n\n\nPostModule\n\nPostModule\n\nPostModule -->\n\nPostService->PostModule\n\n\n\n\n\nUserService\n\nUserService\n\nPostModule -->\n\nUserService->PostModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/post/post.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            PostService\n                        \n                        \n                            UserService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            PostController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { PostService } from './post.service';\nimport { PostController } from './post.controller';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { Post } from './post.entity';\nimport { User } from 'src/user/user.entity';\nimport { UserService } from 'src/user/user.service';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([Post, User])],\n  providers: [PostService, UserService],\n  controllers: [PostController],\n})\nexport class PostModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PostService.html":{"url":"injectables/PostService.html","title":"injectable - PostService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PostService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/post/post.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                create\n                            \n                            \n                                    Async\n                                delete\n                            \n                            \n                                get\n                            \n                            \n                                getAll\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(postRepo: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/post/post.service.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        postRepo\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        create\n                        \n                    \n                \n            \n            \n                \ncreate(requestBody: CreatePostDto, currentUser: User)\n                \n            \n\n\n                    \n                        \n                            Defined in src/post/post.service.ts:15\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                requestBody\n                                            \n                                                            CreatePostDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                currentUser\n                                            \n                                                            User\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        delete\n                        \n                    \n                \n            \n            \n                \n                        \n                    delete(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/post/post.service.ts:45\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        get\n                        \n                    \n                \n            \n            \n                \nget(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/post/post.service.ts:27\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getAll\n                        \n                    \n                \n            \n            \n                \ngetAll()\n                \n            \n\n\n                    \n                        \n                            Defined in src/post/post.service.ts:23\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(id: number, requestBody: UpdatePostDto, currentUser: User)\n                \n            \n\n\n                    \n                        \n                            Defined in src/post/post.service.ts:31\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                requestBody\n                                            \n                                                            UpdatePostDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                currentUser\n                                            \n                                                            User\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NotFoundException } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Post } from './post.entity';\nimport { Repository } from 'typeorm';\nimport { CreatePostDto } from './dtos/createPost.dto';\nimport { User } from 'src/user/user.entity';\nimport { UpdatePostDto } from './dtos/updatePost.dto';\n// import { Permission } from 'src/helpers/checkPermission.helper';\n\n@Injectable()\nexport class PostService {\n  constructor(@InjectRepository(Post) private postRepo: Repository) {}\n\n  //CRUD\n  create(requestBody: CreatePostDto, currentUser: User) {\n    const post = this.postRepo.create(requestBody);\n\n    post.user = currentUser;\n\n    return this.postRepo.save(post);\n  }\n\n  getAll() {\n    return this.postRepo.find();\n  }\n\n  get(id: number) {\n    return this.postRepo.findOneBy({ id });\n  }\n\n  async update(id: number, requestBody: UpdatePostDto, currentUser: User) {\n    let post = await this.get(id);\n\n    if (!post) {\n      throw new NotFoundException(`Not found post with id ${id}`);\n    }\n\n    post = { ...post, ...requestBody };\n\n    // Permission.check(id, requestBody, currentUser);\n\n    return this.postRepo.save(post);\n  }\n\n  async delete(id: number) {\n    const post = await this.get(id);\n    if (!post) {\n      throw new NotFoundException(`Not found post with id ${id}`);\n    }\n\n    return this.postRepo.remove(post);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RegisterUserDto.html":{"url":"classes/RegisterUserDto.html","title":"class - RegisterUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RegisterUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/dtos/registerUser.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                email\n                            \n                            \n                                    \n                                    \n                                firstName\n                            \n                            \n                                    \n                                    \n                                lastName\n                            \n                            \n                                    \n                                    \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsEmail()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dtos/registerUser.dto.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        firstName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dtos/registerUser.dto.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        lastName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dtos/registerUser.dto.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dtos/registerUser.dto.ts:19\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { IsEmail, IsNotEmpty } from 'class-validator';\n\nexport class RegisterUserDto {\n  @ApiProperty()\n  @IsEmail()\n  email: string;\n  \n  @ApiProperty()\n  @IsNotEmpty()\n  firstName: string;\n\n  @ApiProperty()\n  @IsNotEmpty()\n  lastName: string;\n\n  @ApiProperty() \n  @IsNotEmpty()\n  password: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/RoleGuard.html":{"url":"guards/RoleGuard.html","title":"guard - RoleGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n    Guards\n    RoleGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/guards/role.guard.ts\n            \n\n\n\n\n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    Constructor\n        \n            \n                \n                    \nconstructor(roles: string[])\n                    \n                \n                        \n                            \n                                Defined in src/guards/role.guard.ts:5\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        roles\n                                                  \n                                                        \n                                                                    string[]\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        canActivate\n                        \n                    \n                \n            \n            \n                \ncanActivate(context: ExecutionContext)\n                \n            \n\n\n                    \n                        \n                            Defined in src/guards/role.guard.ts:7\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     boolean | Promise | Observable\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n        \n\n\n        \n            import { Injectable, CanActivate, ExecutionContext } from '@nestjs/common';\nimport { Observable } from 'rxjs';\n\n@Injectable()\nexport class RoleGuard implements CanActivate {\n  constructor(private roles: string[]) {}\n  canActivate(\n    context: ExecutionContext,\n  ): boolean | Promise | Observable {\n    const request = context.switchToHttp().getRequest();\n    return this.roles.includes(request.currentUser.role.toLowerCase());\n  }\n}\n\n        \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdatePostDto.html":{"url":"classes/UpdatePostDto.html","title":"class - UpdatePostDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdatePostDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/post/dtos/updatePost.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                description\n                            \n                            \n                                    \n                                    \n                                    \n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@MaxLength(160, {message: 'Description is too long !'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/post/dtos/updatePost.dto.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsNotEmpty()@Length(4, 60)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/post/dtos/updatePost.dto.ts:8\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNotEmpty, Length, MaxLength } from 'class-validator';\nimport { ApiProperty } from '@nestjs/swagger';\n\nexport class UpdatePostDto {\n  @ApiProperty()\n  @IsNotEmpty()\n  @Length(4, 60)\n  title: string;\n\n  @ApiProperty()\n  @MaxLength(160, {\n    message: 'Description is too long !',\n  })\n  description: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateUserDto.html":{"url":"classes/UpdateUserDto.html","title":"class - UpdateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/dtos/updateUser.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                email\n                            \n                            \n                                    \n                                    \n                                firstName\n                            \n                            \n                                    \n                                    \n                                lastName\n                            \n                            \n                                    \n                                    \n                                password\n                            \n                            \n                                role\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsEmail()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dtos/updateUser.dto.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        firstName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dtos/updateUser.dto.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        lastName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dtos/updateUser.dto.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dtos/updateUser.dto.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        role\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ROLES\n\n                    \n                \n                    \n                        \n                                Defined in src/user/dtos/updateUser.dto.ts:22\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsEmail, IsNotEmpty } from 'class-validator';\nimport { ROLES } from '../user.entity';\nimport { ApiProperty } from '@nestjs/swagger';\n\nexport class UpdateUserDto {\n  @ApiProperty()\n  @IsEmail()\n  email: string;\n\n  @ApiProperty()\n  @IsNotEmpty()\n  firstName: string;\n\n  @ApiProperty()\n  @IsNotEmpty()\n  lastName: string;\n\n  @ApiProperty()\n  @IsNotEmpty()\n  password: string;\n\n  role: ROLES;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/User.html":{"url":"entities/User.html","title":"entity - User","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  User\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/user.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                email\n                            \n                            \n                                    \n                                firstName\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                lastName\n                            \n                            \n                                    \n                                    \n                                password\n                            \n                            \n                                    \n                                posts\n                            \n                            \n                                    \n                                    \n                                role\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/user.entity.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        firstName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/user.entity.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/user.entity.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        lastName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/user.entity.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()@Exclude()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/user.entity.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        posts\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Post[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, post => post.user)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/user.entity.ts:34\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        role\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ROLES\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({default: undefined})@Exclude()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/user.entity.ts:31\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Entity, Column, PrimaryGeneratedColumn, OneToMany } from 'typeorm';\nimport { Exclude } from 'class-transformer';\nimport { Post } from 'src/post/post.entity';\n\nexport enum ROLES {\n  ADMIN = 'ADMIN',\n  MOD = 'MOD',\n  USER = 'USER',\n}\n\n@Entity()\nexport class User {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column()\n  firstName: string;\n\n  @Column()\n  lastName: string;\n\n  @Column()\n  email: string;\n\n  @Column()\n  @Exclude()\n  password: string;\n\n  @Column({ default: ROLES.USER })\n  @Exclude()\n  role: ROLES;\n\n  @OneToMany(() => Post, (post) => post.user)\n  posts: Post[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UserController.html":{"url":"controllers/UserController.html","title":"controller - UserController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UserController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/user.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                /api/v1/users\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                deleteUser\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                getAllUser\n                            \n                            \n                                    \n                                    \n                                    \n                                getCurrentUser\n                            \n                            \n                                    \n                                    \n                                    \n                                getUser\n                            \n                            \n                                    \n                                loginUser\n                            \n                            \n                                    \n                                registerUser\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                updateUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        deleteUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    deleteUser(id: number, currentUser: User)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiBearerAuth()@Delete('/:id')@UseGuards(new RoleGuard())@UseGuards(AuthGuard)\n                \n            \n\n                    \n                        \n                            Defined in src/user/user.controller.ts:71\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                currentUser\n                                            \n                                                            User\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        getAllUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    getAllUser()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiBearerAuth()@Get()@UseGuards(new RoleGuard())@UseGuards(AuthGuard)\n                \n            \n\n                    \n                        \n                            Defined in src/user/user.controller.ts:37\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        getCurrentUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    getCurrentUser(currentUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiBearerAuth()@Get('/current-user')@UseGuards(AuthGuard)\n                \n            \n\n                    \n                        \n                            Defined in src/user/user.controller.ts:44\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                currentUser\n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        getUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    getUser(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiBearerAuth()@UseGuards(new RoleGuard())@Get('/:id')\n                \n            \n\n                    \n                        \n                            Defined in src/user/user.controller.ts:51\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        loginUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    loginUser(requestBody: LoginUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/login')\n                \n            \n\n                    \n                        \n                            Defined in src/user/user.controller.ts:83\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                requestBody\n                                            \n                                                            LoginUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        registerUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    registerUser(requestBody: RegisterUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/register')\n                \n            \n\n                    \n                        \n                            Defined in src/user/user.controller.ts:79\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                requestBody\n                                            \n                                                            RegisterUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        updateUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateUser(id: number, requestBody: UpdateUserDto, currentUser: User)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiBearerAuth()@Put('/:id')@UseGuards(new RoleGuard())@UseGuards(AuthGuard)\n                \n            \n\n                    \n                        \n                            Defined in src/user/user.controller.ts:59\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                requestBody\n                                            \n                                                            UpdateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                currentUser\n                                            \n                                                            User\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Controller,\n  Delete,\n  Get,\n  Param,\n  ParseIntPipe,\n  Post,\n  Put,\n  UseInterceptors,\n  ClassSerializerInterceptor,\n  UseGuards,\n} from '@nestjs/common';\nimport { UserService } from './user.service';\nimport { UpdateUserDto } from './dtos/updateUser.dto';\nimport { AuthGuard } from 'src/guards/auth.guard';\nimport { RegisterUserDto } from './dtos/registerUser.dto';\nimport { AuthService } from './auth.service';\nimport { LoginUserDto } from './dtos/loginUser.dto';\nimport { CurrentUser } from './decorators/currentUser.decorator';\nimport { RoleGuard } from 'src/guards/role.guard';\nimport { User } from './user.entity';\nimport { ApiBearerAuth } from '@nestjs/swagger';\n\n@Controller('/api/v1/users')\n@UseInterceptors(ClassSerializerInterceptor)\nexport class UserController {\n  constructor(\n    private userService: UserService,\n    private authSerivce: AuthService,\n  ) {}\n\n  @ApiBearerAuth()\n  @Get()\n  @UseGuards(new RoleGuard(['admin', 'mod']))\n  @UseGuards(AuthGuard)\n  getAllUser() {\n    return this.userService.findAll();\n  }\n\n  @ApiBearerAuth()\n  @Get('/current-user')\n  @UseGuards(AuthGuard)\n  getCurrentUser(@CurrentUser() currentUser) {\n    return currentUser;\n  }\n\n  @ApiBearerAuth()\n  @UseGuards(new RoleGuard(['admin']))\n  @Get('/:id')\n  getUser(@Param('id', ParseIntPipe) id: number) {\n    return this.userService.findById(id);\n  }\n\n  @ApiBearerAuth()\n  @Put('/:id')\n  @UseGuards(new RoleGuard(['admin', 'mod', 'user']))\n  @UseGuards(AuthGuard)\n  updateUser(\n    @Param('id', ParseIntPipe) id: number,\n    @Body() requestBody: UpdateUserDto,\n    @CurrentUser() currentUser: User,\n  ) {\n    return this.userService.updateById(id, requestBody, currentUser);\n  }\n\n  @ApiBearerAuth()\n  @Delete('/:id')\n  @UseGuards(new RoleGuard(['admin', 'mod', 'user']))\n  @UseGuards(AuthGuard)\n  deleteUser(\n    @Param('id', ParseIntPipe) id: number,\n    @CurrentUser() currentUser: User,\n  ) {\n    return this.userService.deleteById(id, currentUser);\n  }\n\n  @Post('/register')\n  registerUser(@Body() requestBody: RegisterUserDto) {\n    return this.authSerivce.register(requestBody);\n  }\n  @Post('/login')\n  loginUser(@Body() requestBody: LoginUserDto) {\n    return this.authSerivce.login(requestBody);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UserModule.html":{"url":"modules/UserModule.html","title":"module - UserModule","body":"\n                   \n\n\n\n\n    Modules\n    UserModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_UserModule\n\n\n\ncluster_UserModule_providers\n\n\n\n\nAuthService\n\nAuthService\n\n\n\nUserModule\n\nUserModule\n\nUserModule -->\n\nAuthService->UserModule\n\n\n\n\n\nUserService\n\nUserService\n\nUserModule -->\n\nUserService->UserModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/user/user.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                        \n                            UserService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UserController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { UserService } from './user.service';\nimport { UserController } from './user.controller';\nimport { User } from './user.entity';\nimport { AuthService } from './auth.service';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([User])],\n  providers: [UserService, AuthService],\n  controllers: [UserController],\n})\nexport class UserModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UserService.html":{"url":"injectables/UserService.html","title":"injectable - UserService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UserService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/user.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                create\n                            \n                            \n                                    Async\n                                deleteById\n                            \n                            \n                                findAll\n                            \n                            \n                                findByEmail\n                            \n                            \n                                findById\n                            \n                            \n                                    Async\n                                updateById\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userRepo: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/user/user.service.ts:16\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userRepo\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        create\n                        \n                    \n                \n            \n            \n                \ncreate(requestBody: RegisterUserDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/user/user.service.ts:22\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                requestBody\n                                            \n                                                            RegisterUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        deleteById\n                        \n                    \n                \n            \n            \n                \n                        \n                    deleteById(id: number, currentUser: User)\n                \n            \n\n\n                    \n                        \n                            Defined in src/user/user.service.ts:68\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                currentUser\n                                            \n                                                            User\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findAll\n                        \n                    \n                \n            \n            \n                \nfindAll()\n                \n            \n\n\n                    \n                        \n                            Defined in src/user/user.service.ts:29\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findByEmail\n                        \n                    \n                \n            \n            \n                \nfindByEmail(email: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/user/user.service.ts:37\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findById\n                        \n                    \n                \n            \n            \n                \nfindById(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/user/user.service.ts:33\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        updateById\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateById(id: number, requestBody: UpdateUserDto, currentUser: User)\n                \n            \n\n\n                    \n                        \n                            Defined in src/user/user.service.ts:41\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                requestBody\n                                            \n                                                            UpdateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                currentUser\n                                            \n                                                            User\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  BadRequestException,\n  Injectable,\n  NotFoundException,\n} from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport { User } from './user.entity';\n// import { CreateUserDto } from './dtos/createUser.dto';\nimport { UpdateUserDto } from './dtos/updateUser.dto';\nimport { RegisterUserDto } from './dtos/registerUser.dto';\nimport * as bcrypt from 'bcrypt';\nimport { Permission } from 'src/helpers/checkPermission.helper';\n\n@Injectable()\nexport class UserService {\n  constructor(\n    @InjectRepository(User)\n    private userRepo: Repository,\n  ) {}\n  //CRUD\n  create(requestBody: RegisterUserDto) {\n    // const { email, password } = requestBody;\n    const user = this.userRepo.create(requestBody);\n\n    return this.userRepo.save(user);\n  }\n\n  findAll() {\n    return this.userRepo.find();\n  }\n\n  findById(id: number) {\n    return this.userRepo.findOneBy({ id });\n  }\n\n  findByEmail(email: string) {\n    return this.userRepo.findOneBy({ email });\n  }\n\n  async updateById(id: number, requestBody: UpdateUserDto, currentUser: User) {\n    if (requestBody.role) {\n      throw new BadRequestException('You can not change role!');\n    }\n    let user = await this.findById(id);\n\n    if (!user) {\n      throw new NotFoundException('User does not exits');\n    }\n\n    Permission.check(id, currentUser);\n\n    user = { ...user, ...requestBody };\n\n    //hash password\n    const hashedPassword = await bcrypt.hash(requestBody.password, 10);\n\n    requestBody.password = hashedPassword;\n\n    const updatedUser = await this.userRepo.save(user);\n    return {\n      firstName: updatedUser.firstName,\n      lastName: updatedUser.lastName,\n      email: updatedUser.email,\n    };\n  }\n\n  async deleteById(id: number, currentUser: User) {\n    let user = await this.findById(id);\n\n    Permission.check(id, currentUser);\n\n    if (!user) {\n      throw new NotFoundException('User does not exits');\n    }\n\n    return this.userRepo.remove(user);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/app.controller.ts\n            \n            controller\n            AppController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/app.service.ts\n            \n            injectable\n            AppService\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/guards/auth.guard.ts\n            \n            guard\n            AuthGuard\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/guards/role.guard.ts\n            \n            guard\n            RoleGuard\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/helpers/checkPermission.helper.ts\n            \n            class\n            Permission\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/post/dtos/createPost.dto.ts\n            \n            class\n            CreatePostDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/post/dtos/updatePost.dto.ts\n            \n            class\n            UpdatePostDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/post/post.controller.ts\n            \n            controller\n            PostController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/post/post.entity.ts\n            \n            entity\n            Post\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/post/post.service.ts\n            \n            injectable\n            PostService\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/user/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/user/decorators/currentUser.decorator.ts\n            \n            variable\n            CurrentUser\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/user/dtos/loginUser.dto.ts\n            \n            class\n            LoginUserDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/user/dtos/registerUser.dto.ts\n            \n            class\n            RegisterUserDto\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/user/dtos/updateUser.dto.ts\n            \n            class\n            UpdateUserDto\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/user/user.controller.ts\n            \n            controller\n            UserController\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/user/user.entity.ts\n            \n            entity\n            User\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/user/user.service.ts\n            \n            injectable\n            UserService\n            \n                0 %\n                (0/8)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @nestjs/common : ^10.0.0\n        \n            @nestjs/config : ^3.2.0\n        \n            @nestjs/core : ^10.0.0\n        \n            @nestjs/jwt : ^10.2.0\n        \n            @nestjs/platform-express : ^10.0.0\n        \n            @nestjs/swagger : ^7.3.0\n        \n            @nestjs/typeorm : ^10.0.2\n        \n            @types/bcrypt : ^5.0.2\n        \n            bcrypt : ^5.1.1\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.14.1\n        \n            mysql2 : ^3.9.1\n        \n            reflect-metadata : ^0.2.0\n        \n            rxjs : ^7.8.1\n        \n            typeorm : ^0.3.20\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            ROLES   (src/.../user.entity.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/user/user.entity.ts\n    \n        \n            \n                \n                    \n                        \n                        ROLES\n                    \n                \n                        \n                            \n                                 ADMIN\n                            \n                        \n                        \n                            \n                                Value : ADMIN\n                            \n                        \n                        \n                            \n                                 MOD\n                            \n                        \n                        \n                            \n                                Value : MOD\n                            \n                        \n                        \n                            \n                                 USER\n                            \n                        \n                        \n                            \n                                Value : USER\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n  \n\n\n  A progressive Node.js framework for building efficient and scalable server-side applications.\n    \n\n\n\n\n\n\n\n\n  \n    \n  \n\n  \n\nDescription\nNest framework TypeScript starter repository.\nInstallation\nExample :$ npm installRunning the app\nExample :# development\n$ npm run start\n\n# watch mode\n$ npm run start:dev\n\n# production mode\n$ npm run start:prodTest\nExample :# unit tests\n$ npm run test\n\n# e2e tests\n$ npm run test:e2e\n\n# test coverage\n$ npm run test:covSupport\nNest is an MIT-licensed open source project. It can grow thanks to the sponsors and support by the amazing backers. If you'd like to join them, please read more here.\nStay in touch\n\nAuthor - Kamil Myśliwiec\nWebsite - https://nestjs.com\nTwitter - @nestframework\n\nLicense\nNest is MIT licensed.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        PostModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UserModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_PostModule\n\n\n\ncluster_PostModule_providers\n\n\n\ncluster_UserModule\n\n\n\ncluster_UserModule_providers\n\n\n\n\nPostModule\n\nPostModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nPostModule->AppModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nAppModule -->\n\nUserModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nPostService\n\nPostService\n\nPostModule -->\n\nPostService->PostModule\n\n\n\n\n\nUserService\n\nUserService\n\nPostModule -->\n\nUserService->PostModule\n\n\n\nUserModule -->\n\nUserService->UserModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nUserModule -->\n\nAuthService->UserModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        3 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    3 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    2 Entities\n                \n            \n        \n        \n            \n                \n                    \n                    4 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    6 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    2 Guards\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            Description : \n        \n            License : UNLICENSED\n        \n            Author : \n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            CurrentUser   (src/.../currentUser.decorator.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/user/decorators/currentUser.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        CurrentUser\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createParamDecorator(\n  (data: unknown, ctx: ExecutionContext) => {\n    const request = ctx.switchToHttp().getRequest();\n    console.log(data);\n    return request.currentUser;\n  },\n)\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
